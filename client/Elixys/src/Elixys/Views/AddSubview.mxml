<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" xmlns:Renderers="Elixys.Views.Renderers.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentAdd;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentAdd = new ComponentAdd(null, pComponent);

				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Format the output text
					_viewOutputText.text = "Add " + m_pComponentAdd.AddReagent.Description + " to reactor " + m_pComponentAdd.Reactor + " position " +
						m_pComponentAdd.DeliveryPosition + " for " + m_pComponentAdd.DeliveryTime + " seconds at " + m_pComponentAdd.DeliveryPressure +
						" PSI.";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Fill the reactor combo box
					UpdateEnumNumberComboBox(m_pComponentAdd.ReactorValidation, _editReactorCombo, m_pComponentAdd.Reactor.toString());
					
					// Initialize the reagent combo box
					UpdateEnumReagentComboBox(m_pComponentAdd.AddReagentValidation, _editReagentCombo, m_pComponentAdd.AddReagent);
					
					// Fill the position combo box
					UpdateEnumNumberComboBox(m_pComponentAdd.DeliveryPositionValidation, _editPositionCombo, m_pComponentAdd.DeliveryPosition.toString());

					// Set the delivery time and pressure unless the user is editing one
					if (m_pKeyboardFocusTextArea != _editDeliveryTime)
					{
						_editDeliveryTime.text = m_pComponentAdd.DeliveryTime.toString();
					}
					if (m_pKeyboardFocusTextArea != _editDeliveryPressure)
					{
						_editDeliveryPressure.text = m_pComponentAdd.DeliveryPressure.toString();
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Format the output text
					var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor(m_pComponentAdd.Reactor);
					_runOutputText1.text = "Adding " + m_pComponentAdd.AddReagent.Description + " to reactor " + m_pComponentAdd.Reactor + " position " +
						m_pComponentAdd.DeliveryPosition + " for " + m_pComponentAdd.DeliveryTime + " seconds at " + m_pComponentAdd.DeliveryPressure +
						" PSI.";
					_runOutputText2.text = "Temperature: " + pReactor.Temperature() + " C";
					_runReactorText2.text = "Reactor " + m_pComponentAdd.Reactor;
				}
			}

			// Called when reagent details arrive from the server
			public override function UpdateReagents(pReagents:Array):void
			{
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Update the reagent combo box items
					UpdateEnumReagentComboBoxItems(pReagents, _editReagentCombo);
				}
			}
			
			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}

			// Called when the user changes the selection in one of the combo boxes
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentAdd.Reactor = parseInt(_editReactorCombo.selectedItem as String);

				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentAdd, "sequence/" + nSequenceID + "/component/" + m_pComponentAdd.ID);
			}
			protected function OnReagentChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentAdd.AddReagent = _editReagentCombo.selectedItem as Reagent;
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentAdd, "sequence/" + nSequenceID + "/component/" + m_pComponentAdd.ID);
			}
			protected function OnPositionChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentAdd.DeliveryPosition = parseInt(_editPositionCombo.selectedItem as String);
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentAdd, "sequence/" + nSequenceID + "/component/" + m_pComponentAdd.ID);
			}
			
			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editDeliveryTime)
				{
					m_pComponentAdd.DeliveryTime = parseInt(_editDeliveryTime.text);
				}
				if (m_pKeyboardFocusTextArea == _editDeliveryPressure)
				{
					m_pComponentAdd.DeliveryPressure = parseFloat(_editDeliveryPressure.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentAdd, "sequence/" + nSequenceID + "/component/" + m_pComponentAdd.ID);
			}
			
			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentAdd:ComponentAdd;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<mx:Text id="_viewOutputText" styleName="TextMedium" width="80%" />
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:VGroup gap="15" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:VGroup width="100%">
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:HGroup horizontalAlign="right" width="30%">
							<s:Label text="Add" styleName="TextMedium" />
						</s:HGroup>
						<s:HGroup horizontalAlign="left" width="70%">
							<s:ComboBox id="_editReagentCombo" labelField="Name" change="OnReagentChange(event)" styleName="TextMedium" width="75%" />
						</s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:Spacer width="30%" />
						<s:HGroup horizontalAlign="left" width="70%">
							<s:Label styleName="FieldDescription" text="Reagent to add to the reactor"/>
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:HGroup horizontalAlign="right" width="30%">
							<s:Label text="to reactor" styleName="TextMedium" />
						</s:HGroup>
						<s:HGroup horizontalAlign="left" width="70%">
							<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="75%" />
						</s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:Spacer width="30%" />
						<s:HGroup horizontalAlign="left" width="70%">
							<s:Label styleName="FieldDescription" text="Reactor where the reagent will be added"/>
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:HGroup horizontalAlign="right" width="30%">
							<s:Label text="at position" styleName="TextMedium" />
						</s:HGroup>
						<s:HGroup horizontalAlign="left" width="70%">
							<s:ComboBox id="_editPositionCombo" change="OnPositionChange(event)" styleName="TextMedium" width="75%" />
						</s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:Spacer width="30%" />
						<s:HGroup horizontalAlign="left" width="70%">
							<s:Label styleName="FieldDescription" text="Position where the reagent will be added"/>
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:HGroup horizontalAlign="right" width="30%">
							<s:Label text="for" styleName="TextMedium" />
						</s:HGroup>
						<s:HGroup horizontalAlign="left" width="70%">
							<Renderers:AutoTextArea id="_editDeliveryTime" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
								focusOut="OnTextFocusOut(event)" />
							<s:Label text="seconds" styleName="TextMedium" />
						</s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:Spacer width="30%" />
						<s:HGroup horizontalAlign="left" width="70%">
							<s:Label styleName="FieldDescription" text="Number of seconds to deliver the reagent"/>
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:HGroup horizontalAlign="right" width="30%">
							<s:Label text="using" styleName="TextMedium" />
						</s:HGroup>
						<s:HGroup horizontalAlign="left" width="70%">
							<Renderers:AutoTextArea id="_editDeliveryPressure" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
								focusOut="OnTextFocusOut(event)" />
							<s:Label text="PSI" styleName="TextMedium" />
						</s:HGroup>
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="15" width="100%">
						<s:Spacer width="30%" />
						<s:HGroup horizontalAlign="left" width="70%">
							<s:Label styleName="FieldDescription" text="Pressure to use when delivering the reagent"/>
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:HGroup paddingLeft="15" paddingRight="15" gap="15" width="100%" height="100%">
				<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="100%" height="100%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:VGroup>
				<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%">
					<s:BorderContainer backgroundColor="0x777777" width="320" height="320" />
					<mx:Text id="_runReactorText2" styleName="TextMedium" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
