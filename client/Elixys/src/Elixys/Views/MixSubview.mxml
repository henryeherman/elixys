<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" xmlns:Renderers="Elixys.Views.Renderers.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentMix;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			import Elixys.Objects.StateSequence;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentMix = new ComponentMix(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Set the name and format the output text
					_viewComponentName.text = m_pComponentMix.Name;
					_outputText.text = "Mix the contents of reactor " + m_pComponentMix.Reactor + " by stirring at " + m_pComponentMix.StirSpeed +
						" for " + m_pComponentMix.MixTime + " seconds.";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Set the name
					_editComponentName.text = m_pComponentMix.Name;

					// Fill the reactor combo box
					UpdateEnumNumberComboBox(m_pComponentMix.ReactorValidation, _editReactorCombo, m_pComponentMix.Reactor.toString());
					
					// Set all variables except the one the user is editing
					if (m_pKeyboardFocusTextArea != _editTime)
					{
						_editTime.text = m_pComponentMix.MixTime.toString();
					}
					if (m_pKeyboardFocusTextArea != _editStirSpeed)
					{
						_editStirSpeed.text = m_pComponentMix.StirSpeed.toString();
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					/*
					// Format the output text
					var pStateSequence:StateSequence = m_pElixysMain.GetActiveSequenceView().GetStateSequence();
					var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor(m_pComponentEvaporate.Reactor);
					_runOutputText1.text = "Evaporating reactor " + m_pComponentEvaporate.Reactor + " at " + 
						m_pComponentEvaporate.EvaporationTemperature + " C for " + m_pComponentEvaporate.Duration +
						" seconds and cooling to " + m_pComponentEvaporate.FinalTemperature + " C.  Stirring at " +
						m_pComponentEvaporate.StirSpeed + " rpm.";
					_runOutputText2.text = "Status: " + pStateSequence.ServerState().RunState().Status() + "\nTemperature: " +
						pReactor.Temperature() + " C";
					if (pReactor.Activity() != 0)
					{
						_runOutputText2.text += "\nActivity: " + pReactor.Activity() + " mCi at " + pReactor.ActivityTime();
					}
					_runReactorText2.text = "Reactor " + m_pComponentEvaporate.Reactor;
					*/
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user changes the selection of the combo box
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentMix.Reactor = parseInt(_editReactorCombo.selectedItem as String);

				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentMix, "sequence/" + nSequenceID + "/component/" + m_pComponentMix.ID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editTime)
				{
					m_pComponentMix.MixTime = parseInt(_editTime.text);
				}
				if (m_pKeyboardFocusTextArea == _editStirSpeed)
				{
					m_pComponentMix.StirSpeed = parseInt(_editStirSpeed.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentMix, "sequence/" + nSequenceID + "/component/" + m_pComponentMix.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentMix:ComponentMix;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_viewComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_editComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:VGroup gap="15" width="100%" height="100%">
					<s:Spacer height="100%" />
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Reactor:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Reactor to mix"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Time:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editTime" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
														focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Time to mix in seconds"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Stir speed:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editStirSpeed" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
														focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Speed of the stir bar"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:Spacer height="100%" />
				</s:VGroup>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:HGroup paddingLeft="15" paddingRight="15" gap="15" width="100%" height="100%">
				<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="100%" height="100%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:VGroup>
				<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%">
					<s:BorderContainer backgroundColor="0x777777" width="320" height="320" />
					<mx:Text id="_runReactorText2" styleName="TextMedium" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
