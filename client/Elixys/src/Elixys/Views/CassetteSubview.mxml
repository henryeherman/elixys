<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" xmlns:Renderers="Elixys.Views.Renderers.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentCassette;
			import Elixys.Objects.Reagent;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			
			/***
			 * Member functions
			 **/

			// Returns the currently selected reagent
			public function SelectedReagentID():uint
			{
				if (m_pSelectedReagent != null)
				{
					return m_pSelectedReagent.ReagentID;
				}
				else
				{
					return 0;
				}
			}
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// If we are in edit mode then we want to hide any row we are editing if we are switching components
				if ((m_sViewMode == SubviewBase.EDITMODE) && (m_pComponentCassette != null) && (m_pComponentCassette.ID != pComponent.ID))
				{
					StopEditing();
				}
				
				// Remember the component
				m_pComponentCassette = new ComponentCassette(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					_viewCassetteName.text = m_pComponentCassette.Name;
					if (m_pComponentCassette.Available)
					{
						// Show the reagent table and hide the static text
						_viewCassetteDisabled.visible = false;
						_viewCassetteDisabled.includeInLayout = false;
						_viewCassetteEnabled.visible = true;
						_viewCassetteEnabled.includeInLayout = true;
						
						// Update the grid with the server reagent data
						UpdateReagentGrid(_viewCassetteGrid, m_pComponentCassette.Reagents);
					}
					else
					{
						// Hide the reagent table and show the static text
						_viewCassetteDisabled.visible = true;
						_viewCassetteDisabled.includeInLayout = true;
						_viewCassetteEnabled.visible = false;
						_viewCassetteEnabled.includeInLayout = false;
					}
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Set the name and enable or disable the cassette grid
					_editCassetteName.text = m_pComponentCassette.Name;
					_editCassetteGrid.enabled = m_pComponentCassette.Available;
					_editCassetteUsedCheckBox.selected = m_pComponentCassette.Available;

					// Update the grid with the server reagent data
					UpdateReagentGrid(_editCassetteGrid, m_pComponentCassette.Reagents);
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
				}
			}

			// Start editing the reagent
			protected function StartEditing(pButton:Button, pReagent:Reagent):void
			{
				// Open the new row
				m_pOpenRowButton = pButton;
				m_pOpenRowButton.label = "-";
				m_pSelectedReagent = pReagent;
				
				// Refresh the grid
				_editCassetteGrid.invalidateDisplayList();
			}
			
			// Stops editing the reagent
			protected function StopEditing():void
			{
				// Exit from editing mode
				if (m_pOpenRowButton != null)
				{
					m_pOpenRowButton.label = "+";
				}
				m_pOpenRowButton = null;
				m_pSelectedReagent = null;

				// Refresh the grid
				_editCassetteGrid.invalidateDisplayList();
			}
			
			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);
				
				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user toggles the cassette used check box
			protected function OnCassetteUsedCheckBox(event:Event):void
			{
				// Update our component
				m_pComponentCassette.Available = _editCassetteUsedCheckBox.selected;

				// Removing the following line causes a compile error for reasons I don't understand
				var pElixysMain:ElixysMain = null;

				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentCassette, "sequence/" + nSequenceID + "/component/" + m_pComponentCassette.ID);
			}
			
			// Called when the user clicks the edit button on a reagent
			public function OnEditButtonClick(event:MouseEvent, data:Object):void
			{
				// Get the button and determine if we are opening a new row
				var pButton:Button = event.target as Button;
				var bOpeningNewRow:Boolean = (m_pOpenRowButton != pButton);
				
				// Stop edit the current row
				StopEditing();
				
				// Return if we aren't opening a new row
				if (!bOpeningNewRow)
				{
					return;
				}
				
				// Start editing the new row
				StartEditing(pButton, data as Reagent);
			}

			// Called when the user toggles the reagent used check box
			public function OnReagentUsedCheckBox(event:Event):void
			{
				// Update our component
				m_pSelectedReagent.Available = (event.target as CheckBox).selected;
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pSelectedReagent, "sequence/" + nSequenceID + "/reagent/" + m_pSelectedReagent.ReagentID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (pFocusTarget.id == "_editName")
				{
					m_pSelectedReagent.Name = pFocusTarget.text;
				}
				if (pFocusTarget.id == "_editDescription")
				{
					m_pSelectedReagent.Description = pFocusTarget.text;
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pSelectedReagent, "sequence/" + nSequenceID + "/reagent/" + m_pSelectedReagent.ReagentID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentCassette:ComponentCassette;
			
			// Reagent editing
			private var m_pOpenRowButton:Button = null;
			private var m_pSelectedReagent:Reagent = null;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_viewCassetteName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup id="_viewCassetteDisabled" visible="true" width="100%" height="100%"
					  horizontalAlign="center" horizontalCenter="0" includeInLayout="true"
					  verticalAlign="middle" verticalCenter="0">
				<s:Label width="80%" styleName="TextMedium"
						 text="This cassette is not used in this sequence."/>		
			</s:VGroup>
			<s:VGroup id="_viewCassetteEnabled" visible="false" width="100%" height="100%"
					  horizontalAlign="center" horizontalCenter="0" includeInLayout="false"
					  verticalAlign="top" verticalCenter="0">
				<s:DataGrid id="_viewCassetteGrid" width="100%" height="100%" selectionMode="none">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn width="70" headerText="Position">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import Elixys.Objects.Reagent;
													
													override public function set data(value:Object):void
													{
														// Set our base class' variable
														super.data = value;
														
														if (value != null)
														{
															// Formats the centered label
															_text.text = (value as Reagent).Position;
														}
													}
												]]>
											</fx:Script>
											<s:VGroup width="100%" height="100%"
													  horizontalAlign="center"
													  verticalAlign="middle">
												<s:Label id="_text" styleName="TextMedium"/>
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn width="150" dataField="Name" headerText="Name">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer styleName="TextMedium"/>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="Description" headerText="Description">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer styleName="TextSmall"/>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_editCassetteName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:HGroup width="100%" horizontalAlign="left">
					<s:CheckBox id="_editCassetteUsedCheckBox"
								label="Use this cassette in this sequence"
								change="OnCassetteUsedCheckBox(event)" styleName="TextMedium"/>
				</s:HGroup>
				<s:BorderContainer width="100%" height="100%">
					<s:VGroup x="0" y="0" width="100%" height="100%" horizontalAlign="center"
							  horizontalCenter="0" verticalAlign="top" verticalCenter="0">
						<s:DataGrid id="_editCassetteGrid" width="100%" height="100%"
									selectionMode="none" variableRowHeight="true">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn width="50" headerText="Edit">
										<s:itemRenderer>
											<fx:Component>
												<s:GridItemRenderer>
													<s:VGroup height="100%" paddingBottom="10"
															  paddingLeft="10" paddingRight="10"
															  paddingTop="10" verticalAlign="middle">
														<s:Button width="30" height="100%" label="+"
																  click="outerDocument.OnEditButtonClick(event, data)"
																  fontSize="16" styleName="button"/>
													</s:VGroup>
												</s:GridItemRenderer>
											</fx:Component>
										</s:itemRenderer>
									</s:GridColumn>
									<s:GridColumn width="70" headerText="Position">
										<s:itemRenderer>
											<fx:Component>
												<s:GridItemRenderer>
													<fx:Script>
														<![CDATA[
															import Elixys.Objects.Reagent;
															
															override public function set data(value:Object):void
															{
																// Set our base class' variable
																super.data = value;
																
																if (value != null)
																{
																	// Formats the centered label
																	_text.text = (value as Reagent).Position;
																}
															}
														]]>
													</fx:Script>
													<s:VGroup width="100%" height="100%"
															  horizontalAlign="center"
															  verticalAlign="middle">
														<s:Label id="_text" styleName="TextMedium"/>
													</s:VGroup>
												</s:GridItemRenderer>
											</fx:Component>
										</s:itemRenderer>
									</s:GridColumn>
									<s:GridColumn>
										<s:headerRenderer>
											<fx:Component>
												<Renderers:ReagentGridHeader>
													<Renderers:ReagentGridHeaderChild id="Name" x="0"
																					  y="0" width="150"/>
													<Renderers:ReagentGridHeaderChild id="Description"
																					  x="150" y="0"
																					  width="100%"/>
												</Renderers:ReagentGridHeader>
											</fx:Component>
										</s:headerRenderer>
										<s:itemRenderer>
											<fx:Component>
												<s:GridItemRenderer>
													<fx:Script>
														<![CDATA[
															import Elixys.Objects.Reagent;
															
															// Formats the name and description labels
															override public function set data(value:Object):void
															{
																// Set our base class' variable
																super.data = value;
																
																if (value != null)
																{
																	// Are we currently the selected reagent?
																	var pReagent:Reagent = value as Reagent;
																	if (pReagent.ReagentID == outerDocument.SelectedReagentID())
																	{
																		// Yes, so hide the static text and show the edit controls
																		_staticView.visible = false;
																		_staticView.includeInLayout = false;
																		_editView.visible = true;
																		_editView.includeInLayout = true;
																		
																		// Set the used check box and the edit box text
																		_usedCheckBox.selected = pReagent.Available;
																		if (outerDocument.KeyboardFocusTextArea() != _editName)
																		{
																			_editName.text = pReagent.Name;
																		}
																		if (outerDocument.KeyboardFocusTextArea() != _editDescription)
																		{
																			_editDescription.text = pReagent.Description;
																		}
																		
																		// Enable or disable the edit boxes
																		_editName.enabled = pReagent.Available;
																		_editDescription.enabled = pReagent.Available;
																	}
																	else
																	{
																		// No, so show the static text and hide the edit controls
																		_staticView.visible = true;
																		_staticView.includeInLayout = true;
																		_editView.visible = false;
																		_editView.includeInLayout = false;
																		
																		// Set the static text
																		_nameLabel.text = data.Name;
																		_descriptionLabel.text = data.Description;
																	}
																}
															}
														]]>
													</fx:Script>
													<s:VGroup width="100%" height="100%">
														<s:HGroup id="_staticView" visible="true"
																  width="100%" height="100%"
																  includeInLayout="true">
															<s:VGroup width="150" height="100%"
																	  horizontalAlign="left"
																	  verticalAlign="middle">
																<s:Label id="_nameLabel" paddingLeft="4"
																		 paddingRight="4"
																		 styleName="TextMedium"/>
															</s:VGroup>
															<s:VGroup width="100%" height="100%"
																	  horizontalAlign="left"
																	  verticalAlign="middle">
																<s:Label id="_descriptionLabel"
																		 paddingLeft="4"
																		 paddingRight="4"
																		 styleName="TextSmall"/>
															</s:VGroup>
														</s:HGroup>
														<s:VGroup id="_editView" visible="false"
																  width="100%" height="100%" gap="15"
																  includeInLayout="false">
															<s:HGroup width="100%" paddingLeft="20"
																	  paddingTop="15">
																<s:CheckBox id="_usedCheckBox"
																			label="Use this reagent in this sequence"
																			change="outerDocument.OnReagentUsedCheckBox(event)"
																			styleName="TextMedium"/>
															</s:HGroup>
															<s:VGroup width="100%" height="100%">
																<s:HGroup width="100%"
																		  verticalAlign="bottom">
																	<s:HGroup width="30%" height="100%"
																			  horizontalAlign="right"
																			  paddingTop="5"
																			  verticalAlign="middle">
																		<s:Label height="100%"
																				 styleName="TextMedium"
																				 text="Name"/>
																	</s:HGroup>
																	<s:VGroup width="70%"
																			  horizontalAlign="left"
																			  verticalAlign="middle">
																		<Renderers:AutoTextArea id="_editName"
																								width="80%"
																								focusIn="outerDocument.OnTextFocusIn(event)"
																								focusOut="outerDocument.OnTextFocusOut(event)"
																								styleName="TextMedium"/>
																		<s:Label styleName="FieldDescription" text="Brief name of this reagent"/>
																	</s:VGroup>
																</s:HGroup>
																<s:HGroup width="100%"
																		  verticalAlign="top">
																	<s:HGroup width="30%"
																			  horizontalAlign="right"
																			  paddingTop="5"
																			  verticalAlign="middle">
																		<s:Label height="100%"
																				 styleName="TextMedium"
																				 text="Description"/>
																	</s:HGroup>
																	<s:VGroup width="70%"
																			  horizontalAlign="left"
																			  verticalAlign="middle">
																		<Renderers:AutoTextArea id="_editDescription"
																								width="80%"
																								fixedHeightInLines="2"
																								focusIn="outerDocument.OnTextFocusIn(event)"
																								focusOut="outerDocument.OnTextFocusOut(event)"
																								styleName="TextMedium"/>
																		<s:Label styleName="FieldDescription" text="Long description of this reagent"/>
																	</s:VGroup>
																</s:HGroup>
															</s:VGroup>
														</s:VGroup>
													</s:VGroup>
												</s:GridItemRenderer>
											</fx:Component>
										</s:itemRenderer>    
									</s:GridColumn>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup>
				</s:BorderContainer>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" width="100%" height="100%" horizontalAlign="center"
				  horizontalCenter="0" includeInLayout="false" verticalAlign="middle"
				  verticalCenter="0">
			<mx:Text width="80%" styleName="TextMedium"
					 text="This where run mode will be implemented"/>		
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
