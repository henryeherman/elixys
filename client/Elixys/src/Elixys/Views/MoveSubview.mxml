<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" width="100%" height="100%" xmlns:Renderers="Elixys.Views.Renderers.*">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentMove;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			import Elixys.Objects.StateSequence;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentMove = new ComponentMove(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Set the name and format the output text
					_viewComponentName.text = m_pComponentMove.Name;
					_outputText.text = "Move reactor " + m_pComponentMove.Reactor + " to the " + m_pComponentMove.Position + " position.";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Set the name
					_editComponentName.text = m_pComponentMove.Name;
					
					// Fill the reactor and position combo boxes
					UpdateEnumNumberComboBox(m_pComponentMove.ReactorValidation, _editReactorCombo, m_pComponentMove.Reactor.toString());
					UpdateEnumStringComboBox(m_pComponentMove.PositionValidation, _editPositionCombo, m_pComponentMove.Position);
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					/*
					// Removing the following line causes a compile error for reasons I don't understand
					var pElixysMain:ElixysMain;

					// Format the output text
					var pStateSequence:StateSequence = m_pElixysMain.GetActiveSequenceView().GetStateSequence();
					var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor(m_pComponentReact.Reactor);
					_runOutputText1.text = "Reacting reactor " + m_pComponentReact.Reactor + ", position " + m_pComponentReact.Position +
						" at " + m_pComponentReact.ReactionTemperature + " C for " + m_pComponentReact.Duration +
						" seconds and cooling to " + m_pComponentReact.FinalTemperature + " C.  Stirring at " +
						m_pComponentReact.StirSpeed + " rpm.";
					_runOutputText2.text = "Status: " + pStateSequence.ServerState().RunState().Status() + "\nTemperature: " +
						pReactor.Temperature() + " C";
					_runReactorText2.text = "Reactor " + m_pComponentReact.Reactor;
					*/
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user changes the selection of the combo box
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentMove.Reactor = parseInt(_editReactorCombo.selectedItem as String);
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentMove, "sequence/" + nSequenceID + "/component/" + m_pComponentMove.ID);
			}
			protected function OnPositionChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentMove.Position = _editPositionCombo.selectedItem as String;
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentMove, "sequence/" + nSequenceID + "/component/" + m_pComponentMove.ID);
			}
			
			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentMove:ComponentMove;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_viewComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_editComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:VGroup gap="15" width="100%" height="100%">
					<s:Spacer height="100%" />
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Reactor:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Reactor to move"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Position:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<s:ComboBox id="_editPositionCombo" change="OnPositionChange(event)" styleName="TextMedium" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Position to move the reactor"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:Spacer height="100%" />
				</s:VGroup>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:HGroup paddingLeft="15" paddingRight="15" gap="15" width="100%" height="100%">
				<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="100%" height="100%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:VGroup>
				<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%">
					<s:BorderContainer backgroundColor="0x777777" width="320" height="320" />
					<mx:Text id="_runReactorText2" styleName="TextMedium" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
