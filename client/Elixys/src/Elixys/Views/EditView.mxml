<?xml version="1.0" encoding="utf-8"?>
<Views:SequenceViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPConnection;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.*;
			
			import spark.components.BorderContainer;
			import spark.components.Button;

			/***
			 * Member functions
			 **/
			
			// Update state
			public override function UpdateState(pState:State):void
			{
				// Pass if we haven't finished initialization
				if (m_pOnButtonClick == null)
				{
					return;
				}
				
				// Update the sequence state
				var pStateSequence:StateSequence = new StateSequence(StateSequence.EDITTYPE, null, pState);
				UpdateSequenceState(pStateSequence.Buttons(), pStateSequence.SequenceID(), pStateSequence.ComponentID());

				// Request the sequence from the server
				RequestSequence(m_nSequenceID);
			}
			
			// Update sequence
			public override function UpdateSequence(pSequence:Sequence):void
			{
				// Update the sequence sequence
				UpdateSequenceSequence(pSequence);

				// Request the currently selected sequence component from the server
				RequestSequenceComponent(m_nSequenceID, m_nComponentID);
			}
			
			// Update component
			public override function UpdateComponent(pComponent:Component):void
			{
				// Update the sequence component
				UpdateSequenceComponent(pComponent);
			}
			
			// Update reagent
			public override function UpdateReagent(pReagent:Reagent):void
			{
				// Update the sequence reagent
				UpdateSequenceReagent(pReagent);
			}
			
			// Prepares a unit operation for dragging
			private function PrepareUnitOperationDrag(pContainer:DisplayObjectContainer, sLabelName:String, nX:uint, nY:uint):BorderContainer
			{
				// Get the text of the unit operation
				var pTargetLabel:Label = FindDecendentByName(pContainer, "_unitOperationLabel") as Label;
				
				// Create a new object to drag
				var pLabel:Label = new Label();
				pLabel.text = pTargetLabel.text;
				pLabel.styleName = "TextMedium";
				var pVGroup:VGroup = new VGroup();
				pVGroup.horizontalAlign = "center";
				pVGroup.verticalAlign = "middle";
				pVGroup.percentHeight = 100;
				pVGroup.percentWidth = 100;
				pVGroup.addElement(pLabel);
				var pBorderContainer:BorderContainer = new BorderContainer();
				pBorderContainer.width = 150;
				pBorderContainer.height = 40;
				pBorderContainer.x = nX - (pBorderContainer.width / 2);
				pBorderContainer.y = nY - (pBorderContainer.height / 2);
				pBorderContainer.addElement(pVGroup);
				return pBorderContainer;
			}
			
			// Find the border container ancestor
			private function FindBorderContainer(pParent:DisplayObjectContainer):BorderContainer
			{
				// Walk the ancestor tree
				while ((pParent != null) && ((pParent as BorderContainer) == null))
				{
					pParent = pParent.parent;
				}
				if (pParent == null)
				{
					// Failed to find border container
					return null;
				}
				return pParent as BorderContainer;
			}

			// Walk the decendant tree until we find a child with the given name
			private function FindDecendentByName(pTarget:DisplayObjectContainer, sName:String):DisplayObject
			{
				// Make sure our target is valid
				if (pTarget == null)
				{
					return null;
				}
				
				// Check if our target is the one we are searching for
				if (pTarget.name == sName)
				{
					return pTarget;
				}
				
				// Walk the immediate children
				for (var nChild:uint = 0; nChild < pTarget.numChildren; ++nChild)
				{
					var pChild:DisplayObject = pTarget.getChildAt(nChild);
					if (pChild.name == sName)
					{
						return pChild;
					}
					else
					{
						// Call this function recursively for all children
						pChild = FindDecendentByName(pChild as DisplayObjectContainer, sName);
						if (pChild != null)
						{
							return pChild;
						}
					}
				}
				return null;
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			public function OnCreationComplete():void
			{
				// Set the base class variables
				m_pOnButtonClick = OnButtonClick;
				m_pUnitOperationsList = _unitOperationList;
				m_pSequenceName = _sequenceName;
				m_pSequenceList = _sequenceList;
				m_pNavigationButtons = _navigationButtons;
				m_pViewStack = _viewStack;
				m_pCassetteSubview = _cassetteSubview;
				m_pAddSubview = _addSubview;
				m_pEvaporateSubview = _evaporateSubview;
				m_pTransferSubview = _transferSubview;
				m_pEluteSubview = _eluteSubview;
				m_pReactSubview = _reactSubview;
				m_pPromptSubview = _promptSubview;
				m_pInstallSubview = _installSubview;
				m_pCommentSubview = _commentSubview;
				m_pActivitySubview = _activitySubview;
				
				// Set the subview parents
				SetSubviewParents();
				
				// Initialize the unit operations list
				UpdateConfiguration(m_pServerConfiguration);
			}

			// Unit operation message handlers
			public function OnUnitOperationMouseDown(event:MouseEvent):void
			{
				// Prepare to drag
				var pBorderContainer:BorderContainer = PrepareUnitOperationDrag(event.target as DisplayObjectContainer, "_unitOperationLabel",
					event.stageX, event.stageY);
				pBorderContainer.addEventListener(MouseEvent.MOUSE_UP, OnUnitOperationMouseUp);
				addElement(pBorderContainer);
				
				// Start dragging
				pBorderContainer.startDrag();
			}
			protected function OnUnitOperationMouseUp(event:MouseEvent):void
			{
				// Find the border container
				var pBorderContainer:BorderContainer = FindBorderContainer(event.target as DisplayObjectContainer);
				
				// Stop the dragging and remove the object
				pBorderContainer.stopDrag();
				removeChild(pBorderContainer);
			}
			public function OnUnitOperationTouchBegin(event:TouchEvent):void
			{
				// Prepare to drag
				var pBorderContainer:BorderContainer = PrepareUnitOperationDrag(event.target as DisplayObjectContainer, "_unitOperationLabel",
					event.stageX, event.stageY);
				pBorderContainer.addEventListener(TouchEvent.TOUCH_END, OnUnitOperationTouchEnd);
				addElement(pBorderContainer);
				
				// Start dragging
				pBorderContainer.startTouchDrag(0);
			}
			protected function OnUnitOperationTouchEnd(event:TouchEvent):void
			{
				// Find the border container
				var pBorderContainer:BorderContainer = FindBorderContainer(event.target as DisplayObjectContainer);
				
				// Stop the dragging and remove the object
				pBorderContainer.stopTouchDrag(0);
				removeChild(pBorderContainer);
			}

			// Button click handler
			public function OnButtonClick(event:MouseEvent):void
			{
				// Create a POST request
				var pPostSequence:PostSequence = new PostSequence();
				pPostSequence.TargetID((event.target as spark.components.Button).id);
				
				// Pass the request to the server
				DoPost(pPostSequence, "EDIT");
			}

		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingLeft="20"
			paddingRight="20" paddingTop="20" paddingBottom="20" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label styleName="TextMedium" text="Toolbox" />
			<s:List id="_unitOperationList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<fx:Script>
								<![CDATA[
									// Formats the label text
									override public function set data(value:Object):void
									{
										super.data = value;
										if (value != null)
										{
											_unitOperationLabel.text = value as String;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:BorderContainer mouseDown="outerDocument.OnUnitOperationMouseDown(event)"
										touchBegin="outerDocument.OnUnitOperationTouchBegin(event)" width="150" height="40">
									<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
										<s:Label id="_unitOperationLabel" name="_unitOperationLabel" styleName="TextMedium" />
									</s:VGroup>
								</s:BorderContainer>
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="150">
				<s:Image source="@Embed(source='trashcan.png')" width="150" height="100" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label id="_sequenceName" styleName="TextMedium" text="" />
			<s:List id="_sequenceList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<fx:Script>
								<![CDATA[
									// Formats the button text
									override public function set data(value:Object):void
									{
										super.data = value;
										if (value != null)
										{
											_button.label = ""
											if (data.DisplayIndex != 0)
											{
												_button.label = data.DisplayIndex + ". ";
											}
											_button.label += data.Name;
											_button.id = data.ID;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:Button id="_button" styleName="button" click="outerDocument.OnButtonClick(event)" width="150" height="40" />
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="right" verticalAlign="middle" gap="20" width="100%" height="100%">
			<s:HGroup id="_navigationButtons" gap="20" />
			<s:Button id="PREVIOUS" label="Previous" styleName="button" click="OnButtonClick(event)" width="100%" height="40" />
			<mx:ViewStack id="_viewStack" width="100%" height="100%">
				<Views:CassetteSubview id="_cassetteSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:AddSubview id="_addSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:EvaporateSubview id="_evaporateSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:TransferSubview id="_transferSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:EluteSubview id="_eluteSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:ReactSubview id="_reactSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:PromptSubview id="_promptSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:InstallSubview id="_installSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:CommentSubview id="_commentSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:ActivitySubview id="_activitySubview" m_sViewMode="Edit" width="100%" height="100%" />
			</mx:ViewStack>
			<s:Button id="NEXT" label="Next" styleName="button" click="OnButtonClick(event)" width="100%" height="40" />
		</s:VGroup>
	</s:HGroup>
</Views:SequenceViewBase>
