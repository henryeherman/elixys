<?xml version="1.0" encoding="utf-8"?>
<Views:SequenceViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPConnection;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.*;
			
			import mx.collections.ArrayList;
			import mx.events.DragEvent;
			
			import spark.components.BorderContainer;
			import spark.components.Button;
			import spark.skins.spark.ButtonSkin;

			/***
			 * Member functions
			 **/
			
			// Returns the sequence insertion source and target
			public function GetSequenceInsertionSource():int
			{
				return m_nSequenceInsertionSource;
			}
			public function GetSequenceInsertionTarget():int
			{
				return m_nSequenceInsertionTarget;
			}
			
			// Update state
			public override function UpdateState(pState:State):void
			{
				// Pass if we haven't finished initialization
				if (m_pOnButtonClick == null)
				{
					return;
				}
				
				// Update the sequence state
				var pStateSequence:StateSequence = new StateSequence(StateSequence.EDITTYPE, null, pState);
				UpdateSequenceState(pStateSequence.Buttons(), pStateSequence.SequenceID(), pStateSequence.ComponentID());

				// Request the sequence from the server
				RequestSequence(m_nSequenceID);
			}
			
			// Update sequence
			public override function UpdateSequence(pSequence:Sequence):void
			{
				// Don't update the sequence if the user is adding, rearranging or deleting a components
				if ((m_nSequenceInsertionSource != -1) || (m_nSequenceInsertionTarget != -1))
				{
					return;
				}

				// Update the sequence sequence
				UpdateSequenceSequence(pSequence);

				// Request the currently selected sequence component from the server
				RequestSequenceComponent(m_nSequenceID, m_nComponentID);
			}
			
			// Update component
			public override function UpdateComponent(pComponent:Component):void
			{
				// Update the sequence component
				UpdateSequenceComponent(pComponent);
			}
			
			// Update reagent
			public override function UpdateReagent(pReagent:Reagent):void
			{
				// Update the sequence reagent
				UpdateSequenceReagent(pReagent);
			}
			
			// Prepares a unit operation for dragging
			private function PrepareUnitOperationDrag(pContainer:DisplayObjectContainer, sLabelName:String, nX:uint, nY:uint):BorderContainer
			{
				// Get the text of the unit operation
				var pTargetLabel:Label = FindDecendentByName(pContainer, "_unitOperationLabel") as Label;
				
				// Create a new object to drag
				var pLabel:Label = new Label();
				pLabel.text = pTargetLabel.text;
				pLabel.styleName = "TextMedium";
				var pVGroup:VGroup = new VGroup();
				pVGroup.horizontalAlign = "center";
				pVGroup.verticalAlign = "middle";
				pVGroup.percentHeight = 100;
				pVGroup.percentWidth = 100;
				pVGroup.addElement(pLabel);
				var pBorderContainer:BorderContainer = new BorderContainer();
				pBorderContainer.width = 150;
				pBorderContainer.height = 40;
				pBorderContainer.x = nX - (pBorderContainer.width / 2);
				pBorderContainer.y = nY - (pBorderContainer.height / 2);
				pBorderContainer.addElement(pVGroup);
				return pBorderContainer;
			}
			
			// Find the border container ancestor
			private function FindBorderContainer(pParent:DisplayObjectContainer):BorderContainer
			{
				// Walk the ancestor tree
				while ((pParent != null) && ((pParent as BorderContainer) == null))
				{
					pParent = pParent.parent;
				}
				if (pParent == null)
				{
					// Failed to find border container
					return null;
				}
				return pParent as BorderContainer;
			}

			// Walk the decendant tree until we find a child with the given name
			private function FindDecendentByName(pTarget:DisplayObjectContainer, sName:String):DisplayObject
			{
				// Make sure our target is valid
				if (pTarget == null)
				{
					return null;
				}
				
				// Check if our target is the one we are searching for
				if (pTarget.name == sName)
				{
					return pTarget;
				}
				
				// Walk the immediate children
				for (var nChild:uint = 0; nChild < pTarget.numChildren; ++nChild)
				{
					var pChild:DisplayObject = pTarget.getChildAt(nChild);
					if (pChild.name == sName)
					{
						return pChild;
					}
					else
					{
						// Call this function recursively for all children
						pChild = FindDecendentByName(pChild as DisplayObjectContainer, sName);
						if (pChild != null)
						{
							return pChild;
						}
					}
				}
				return null;
			}

			// Determines if the given rect intersects with the target object
			private function OverlapTest(pMouseStageRect:Rectangle, pTarget:DisplayObject):Boolean
			{
				// Check if any of the four rectange corners are over the target
				var pTargetPoint:Point = pTarget.localToGlobal(new Point(0, 0));
				var pTargetRect:Rectangle = new Rectangle(pTargetPoint.x, pTargetPoint.y, pTarget.width, pTarget.height);
				return pMouseStageRect.intersects(pTargetRect);
			}

			// Locates the sequence component ID under the point
			private function FindSequenceComponentID(pStagePoint:Point):int
			{
				// Get a list of objects under the point
				var pObjectsUnderPoint:Array = getObjectsUnderPoint(pStagePoint);
				
				// Search the list for a ButtonSkin object
				for (var nObject:uint = 0; nObject < pObjectsUnderPoint.length; ++nObject)
				{
					var pObject:Object = pObjectsUnderPoint[nObject];
					if (pObject is ButtonSkin)
					{
						// Get the parent button
						var pButtonSkin:ButtonSkin = pObject as ButtonSkin;
						var pButton:spark.components.Button = pButtonSkin.parent as spark.components.Button;
						if (pButton != null)
						{
							return parseInt(pButton.id);
						}
					}
				}
				
				// Failed to find button
				return -1;
			}

			// Updates the specified component in the sequence list
			private function UpdateSequenceListComponent(nComponentID:uint):void
			{
				// Search the sequence list for the component
				var pArrayList:ArrayList = _sequenceList.dataProvider as ArrayList;
				for (var i:uint = 0; i < pArrayList.length; ++i)
				{
					var pComponent:SequenceComponent = pArrayList.getItemAt(i) as SequenceComponent;
					if (pComponent.ID == nComponentID)
					{
						// Found it.  Update and return
						pArrayList.itemUpdated(pArrayList.getItemAt(i));
						return;
					}
				}
				
				// Component not found
				throw Error("Sequence component not found");
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			public function OnCreationComplete():void
			{
				// Set the base class variables
				m_pOnButtonClick = OnButtonClick;
				m_pUnitOperationsList = _unitOperationList;
				m_pSequenceName = _sequenceName;
				m_pSequenceList = _sequenceList;
				m_pNavigationButtons = _navigationButtons;
				m_pViewStack = _viewStack;
				m_pCassetteSubview = _cassetteSubview;
				m_pAddSubview = _addSubview;
				m_pEvaporateSubview = _evaporateSubview;
				m_pTransferSubview = _transferSubview;
				m_pEluteSubview = _eluteSubview;
				m_pReactSubview = _reactSubview;
				m_pPromptSubview = _promptSubview;
				m_pInstallSubview = _installSubview;
				m_pCommentSubview = _commentSubview;
				m_pActivitySubview = _activitySubview;
				
				// Set the subview parents
				SetSubviewParents();
				
				// Initialize the unit operations list
				UpdateConfiguration(m_pServerConfiguration);

				// Create the timers
				m_pUnitOperationMouseTimer = new Timer(200, 1);
				m_pUnitOperationMouseTimer.addEventListener(TimerEvent.TIMER, OnUnitOperationMouseDownTimer);
				m_pUnitOperationTouchTimer = new Timer(200, 1);
				m_pUnitOperationTouchTimer.addEventListener(TimerEvent.TIMER, OnUnitOperationTouchBeginTimer);
			}
						
			// Unit operation drag message handlers
			public function OnUnitOperationMouseDown(event:MouseEvent):void
			{
				// Remember the mouse down target
				m_pMouseDownTarget = event.target as DisplayObjectContainer;
				
				// Set the timer to allow a certain amount of time to pass before we start dragging
				if (!m_pUnitOperationMouseTimer.running)
				{
					m_pUnitOperationMouseTimer.start();
				}
			}
			public function OnUnitOperationMouseUp(event:MouseEvent):void
			{
				// Is our timer still running?
				if (m_pUnitOperationMouseTimer.running)
				{
					// Yes, so stop it
					m_pUnitOperationMouseTimer.stop();
					
					// Determine what unit operation the user clicked on and handle it
					var pLabel:Label = FindDecendentByName(m_pMouseDownTarget, "_unitOperationLabel") as Label;
					OnUnitOperationClick(pLabel.text);
				}

				// Clear our variables
				m_pMouseDownTarget = null;
			}
			protected function OnUnitOperationMouseDownTimer(event:TimerEvent):void
			{
				// Prepare to drag
				var pBorderContainer:BorderContainer = PrepareUnitOperationDrag(m_pMouseDownTarget, "_unitOperationLabel",
					mouseX, mouseY);
				pBorderContainer.addEventListener(MouseEvent.MOUSE_UP, OnNewUnitOperationMouseUp);
				pBorderContainer.addEventListener(MouseEvent.MOUSE_MOVE, OnNewUnitOperationMouseMove);
				addElement(pBorderContainer);
				
				// Start dragging
				pBorderContainer.startDrag();
				
				// Clear our target
				m_pMouseDownTarget = null;
			}
			protected function OnNewUnitOperationMouseMove(event:MouseEvent):void
			{
				// Handle the unit operation move event
				OnNewUnitOperationMove(event);
			}
			public function OnNewUnitOperationMouseUp(event:MouseEvent):void
			{
				// Find the border container
				var pBorderContainer:BorderContainer = FindBorderContainer(event.target as DisplayObjectContainer);
				
				// Stop the dragging and remove the object
				pBorderContainer.stopDrag();
				removeChild(pBorderContainer);
				
				// Perform any require action
				if (m_nSequenceInsertionTarget != -1)
				{
					// Insert the sequence component
					OnSequenceComponentInsert();
				}
			}
			public function OnUnitOperationTouchBegin(event:TouchEvent):void
			{
				// Remember the mouse down target
				m_pMouseDownTarget = event.target as DisplayObjectContainer;
				
				// Set the timer to allow a certain amount of time to pass before we start dragging
				if (!m_pUnitOperationTouchTimer.running)
				{
					m_pUnitOperationTouchTimer.start();
				}
			}
			public function OnUnitOperationTouchEnd(event:TouchEvent):void
			{
				// Is our timer still running?
				if (m_pUnitOperationTouchTimer.running)
				{
					// Yes, so stop it
					m_pUnitOperationTouchTimer.stop();
					
					// Determine what unit operation the user clicked on and handle it
					var pLabel:Label = FindDecendentByName(m_pMouseDownTarget, "_unitOperationLabel") as Label;
					OnUnitOperationClick(pLabel.text);
				}
				
				// Clear our target
				m_pMouseDownTarget = null;
			}
			protected function OnUnitOperationTouchBeginTimer(event:TimerEvent):void
			{
				// Prepare to drag
				var pBorderContainer:BorderContainer = PrepareUnitOperationDrag(m_pMouseDownTarget, "_unitOperationLabel",
					mouseX, mouseY);
				pBorderContainer.addEventListener(TouchEvent.TOUCH_END, OnNewUnitOperationTouchEnd);
				pBorderContainer.addEventListener(TouchEvent.TOUCH_MOVE, OnNewUnitOperationTouchMove);
				addElement(pBorderContainer);
				
				// Start dragging
				pBorderContainer.startTouchDrag(0);
				
				// Clear our target
				m_pMouseDownTarget = null;
			}
			protected function OnNewUnitOperationTouchMove(event:MouseEvent):void
			{
				// Handle the unit operation move event
				OnNewUnitOperationMove(event);
			}
			public function OnNewUnitOperationTouchEnd(event:TouchEvent):void
			{
				// Find the border container
				var pBorderContainer:BorderContainer = FindBorderContainer(event.target as DisplayObjectContainer);
				
				// Stop the dragging and remove the object
				pBorderContainer.stopTouchDrag(0);
				removeChild(pBorderContainer);
				
				// Perform any require action
				if (m_nSequenceInsertionTarget != -1)
				{
					// Insert the sequence component
					OnSequenceComponentInsert();
				}
			}
			protected function OnNewUnitOperationMove(event:MouseEvent):void
			{
				// Check if we are over the sequence list
				var pDragRectangle:Rectangle = new Rectangle(event.stageX - 75, event.stageY - 20, 150, 40);
				var nOldInsertionTarget:int;
				if (OverlapTest(pDragRectangle,_sequenceList))
				{
					// Determine the ID of the upper sequence component
					var pSequenceListPoint:Point = _sequenceList.localToGlobal(new Point(_sequenceList.width / 2, 0));
					var nUpperComponentID:int = FindSequenceComponentID(new Point(pSequenceListPoint.x, event.stageY - 20));
					if (nUpperComponentID == -1)
					{
						var nLowerComponentID:int = FindSequenceComponentID(new Point(pSequenceListPoint.x, event.stageY + 20));
						if (nLowerComponentID > 0)
						{
							nUpperComponentID = nLowerComponentID - 1;
						}
					}
					if (nUpperComponentID != m_nSequenceInsertionTarget)
					{
						// The component has changed.  Update the sequence list
						if (m_nSequenceInsertionTarget != -1)
						{
							nOldInsertionTarget = m_nSequenceInsertionTarget;
							m_nSequenceInsertionTarget = -1;
							UpdateSequenceListComponent(nOldInsertionTarget);
						}
						if (nUpperComponentID != -1)
						{
							m_nSequenceInsertionTarget = nUpperComponentID;
							UpdateSequenceListComponent(m_nSequenceInsertionTarget);
						}
					}
				}
				else
				{
					// We are not over the sequence list, so remove any insertion gap
					if (m_nSequenceInsertionTarget != -1)
					{
						nOldInsertionTarget = m_nSequenceInsertionTarget;
						m_nSequenceInsertionTarget = -1;
						UpdateSequenceListComponent(nOldInsertionTarget);
					}
				}
			}

			// Called when the user clicks a unit operation
			protected function OnUnitOperationClick(sUnitOperation:String):void
			{
				trace("Handle unit operation click: " + sUnitOperation);
			}

			// Called when the user inserts a sequence component
			protected function OnSequenceComponentInsert():void
			{
				trace("Insert sequence component here");
				var nOldComponentID:int = m_nSequenceInsertionTarget;
				m_nSequenceInsertionTarget = -1;
				UpdateSequenceListComponent(nOldComponentID);
			}

			// Button click handler
			public function OnButtonClick(event:MouseEvent):void
			{
				// Create a POST request
				var pPostSequence:PostSequence = new PostSequence();
				pPostSequence.TargetID((event.target as spark.components.Button).id);
				
				// Pass the request to the server
				DoPost(pPostSequence, "EDIT");
			}
			
			/***
			 * Member variables
			 **/
			
			// Sequence insertion source and target
			private var m_nSequenceInsertionSource:int = -1;
			private var m_nSequenceInsertionTarget:int = -1;

			// Mouse down target
			private var m_pMouseDownTarget:DisplayObjectContainer = null;

			// Timers
			private var m_pUnitOperationMouseTimer:Timer;
			private var m_pUnitOperationTouchTimer:Timer;
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingLeft="20"
			paddingRight="20" paddingTop="20" paddingBottom="20" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label styleName="TextMedium" text="Toolbox" />
			<s:List id="_unitOperationList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									// Formats the label text
									override public function set data(value:Object):void
									{
										super.data = value;
										if (value != null)
										{
											_unitOperationLabel.text = value as String;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="hovered" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:BorderContainer mouseDown="outerDocument.OnUnitOperationMouseDown(event)"
										mouseUp="outerDocument.OnUnitOperationMouseUp(event)"
										touchBegin="outerDocument.OnUnitOperationTouchBegin(event)"
										touchEnd="outerDocument.OnUnitOperationTouchEnd(event)"
										width="150" height="40">
									<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
										<s:Label id="_unitOperationLabel" name="_unitOperationLabel" styleName="TextMedium" />
									</s:VGroup>
								</s:BorderContainer>
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="150">
				<s:Image source="@Embed(source='trashcan.png')" width="150" height="100" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label id="_sequenceName" styleName="TextMedium" text="" />
			<s:List id="_sequenceList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									// Formats the button text
									override public function set data(value:Object):void
									{
										// Set the base class data
										super.data = value;
										
										if (value != null)
										{
											// Format the button text
											_button.label = ""
											if (data.DisplayIndex != 0)
											{
												_button.label = data.DisplayIndex + ". ";
											}
											_button.label += data.Name;
											_button.id = data.ID;
										
											// Show or hide the insertion point
											var bInsertionPoint:Boolean = (outerDocument.GetSequenceInsertionTarget() == data.ID);
											_insertionSpacer.visible = bInsertionPoint;
											_insertionSpacer.includeInLayout = bInsertionPoint;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:Button id="_button" styleName="button" click="outerDocument.OnButtonClick(event)" width="150" height="40" />
								<s:Spacer id="_insertionSpacer" visible="false" includeInLayout="false" width="100%" height="15" />
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="right" verticalAlign="middle" gap="20" width="100%" height="100%">
			<s:HGroup id="_navigationButtons" gap="20" />
			<s:Button id="PREVIOUS" label="Previous" styleName="button" click="OnButtonClick(event)" width="100%" height="40" />
			<mx:ViewStack id="_viewStack" width="100%" height="100%">
				<Views:CassetteSubview id="_cassetteSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:AddSubview id="_addSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:EvaporateSubview id="_evaporateSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:TransferSubview id="_transferSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:EluteSubview id="_eluteSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:ReactSubview id="_reactSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:PromptSubview id="_promptSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:InstallSubview id="_installSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:CommentSubview id="_commentSubview" m_sViewMode="Edit" width="100%" height="100%" />
				<Views:ActivitySubview id="_activitySubview" m_sViewMode="Edit" width="100%" height="100%" />
			</mx:ViewStack>
			<s:Button id="NEXT" label="Next" styleName="button" click="OnButtonClick(event)" width="100%" height="40" />
		</s:VGroup>
	</s:HGroup>
</Views:SequenceViewBase>
