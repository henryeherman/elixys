<?xml version="1.0" encoding="utf-8"?>
<Views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPConnection;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.*;
			
			import spark.components.Button;

			// Called when creation is complete
			public function OnCreationComplete():void
			{
				// Tell the child views to use is as the messaging intermediary
				_viewCassette.SetMessagingParent(this);
			}
			
			// Update functions
			public override function UpdateState(pState:State):void
			{
				// Update our button array with the server data
				var pStateView:StateView = pState as StateView;
				UpdateButtons(_navigationButtons, pStateView.Buttons(), CreateNewButton);
				function CreateNewButton():spark.components.Button
				{
					// Callback to create our new button
					var pButton:spark.components.Button = new spark.components.Button();
					pButton.width = 150;
					pButton.height = 40;
					pButton.styleName = "button";
					pButton.addEventListener(MouseEvent.CLICK, OnButtonClick);
					return pButton;
				}
				
				// Remember the currently sequence and component
				m_sSequenceID = pStateView.SequenceID();
				m_sComponentID = pStateView.ComponentID();

				// Request the sequence from the server
				var pHTTPRequest:HTTPRequest = new HTTPRequest();
				pHTTPRequest.m_sMethod = "GET";
				pHTTPRequest.m_sResource = "/Elixys/sequence/" + m_sSequenceID;
				dispatchEvent(new HTTPRequestEvent(pHTTPRequest));
			}
			public override function UpdateStateSequence(pSequence:Sequence):void
			{
				// Set the sequence name
				_sequenceName.text = pSequence.Metadata().Name;
				
				// Fill the operations list
				UpdateList(_sequenceList, pSequence.Components(), CreateNewItem,  m_sComponentID);
				function CreateNewItem():SequenceComponent
				{
					return new SequenceComponent();
				}
				
				// Request the currently selected sequence component from the server
				var pHTTPRequest:HTTPRequest = new HTTPRequest();
				pHTTPRequest.m_sMethod = "GET";
				pHTTPRequest.m_sResource = "/Elixys/sequence/" + m_sSequenceID + "/component/" + m_sComponentID;
				dispatchEvent(new HTTPRequestEvent(pHTTPRequest));
			}
			public override function UpdateStateComponent(pComponent:Component):void
			{
				// Show and update the appropriate component
				switch (pComponent.ComponentType)
				{
					case ComponentCassette.TYPE:
						var pComponentCassette:ComponentCassette = new ComponentCassette(null, pComponent);
						_viewStack.selectedChild = _viewCassette;
						_viewCassette.Update(pComponentCassette, m_sSequenceID);
						break;
					
					case "ADD":
						_viewStack.selectedChild = _viewAdd;
						break;
					
					case "EVAPORATE":
						_viewStack.selectedChild = _viewEvaporate;
						break;
				}
			}
			public override function UpdateStateReagent(pReagent:Reagent):void
			{
				// Update the active view
				switch (_viewStack.selectedChild)
				{
					case _viewCassette:
						_viewCassette.UpdateStateReagent(pReagent);
						break;
				}
			}
			
			// Button click handler
			public function OnButtonClick(event:MouseEvent):void
			{
				// Create a POST request
				var pPostView:PostView = new PostView();
				pPostView.TargetID((event.target as spark.components.Button).id);
				
				// Convert the request to a byte array
				var pBody:ByteArray = new ByteArray();
				pBody.writeMultiByte(pPostView.toString(), "utf8");
				pBody.position = 0;
				
				// Pass the request up to be sent to the server
				var pHTTPRequest:HTTPRequest = new HTTPRequest();
				pHTTPRequest.m_sMethod = "POST";
				pHTTPRequest.m_sResource = "/Elixys/VIEW";
				pHTTPRequest.m_pBody = pBody;
				dispatchEvent(new HTTPRequestEvent(pHTTPRequest));
			}
			
			// Current sequence and component IDs
			private var m_sSequenceID:String = "";
			private var m_sComponentID:String = "";
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingLeft="20"
			paddingRight="20" paddingTop="20" paddingBottom="20" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label id="_sequenceName" styleName="label" text="sequence name here" />
			<s:List id="_sequenceList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<fx:Script>
								<![CDATA[
									// Formats the button text
									override public function set data(value:Object):void
									{
										super.data = value;
										if (value != null)
										{
											_button.label = ""
											if (data.DisplayIndex != 0)
											{
												_button.label = data.DisplayIndex + ". ";
											}
											_button.label += data.Name;
											_button.id = data.ID;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:Button id="_button" styleName="button" click="outerDocument.OnButtonClick(event)" width="150" height="40" />
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="right" verticalAlign="middle" gap="20" width="100%" height="100%">
			<s:HGroup id="_navigationButtons" gap="20" />
			<s:Button label="Previous" styleName="button" width="150" height="40" />
			<mx:ViewStack id="_viewStack" width="100%" height="100%">
				<Views:ViewViewCassette id="_viewCassette" width="100%" height="100%" />
				<mx:Canvas id="_viewAdd" backgroundColor="0xff0021" width="100%" height="100%" />
				<mx:Canvas id="_viewEvaporate" backgroundColor="0x1200ff" width="100%" height="100%" />
			</mx:ViewStack>
			<s:Button label="Next" styleName="button" width="150" height="40" />
		</s:VGroup>
	</s:HGroup>
</Views:ViewBase>
