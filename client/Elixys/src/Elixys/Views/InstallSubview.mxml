<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" width="100%" height="100%" xmlns:Renderers="Elixys.Views.Renderers.*">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentInstall;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentInstall = new ComponentInstall(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Format the output text
					_outputText.text = "Move reactor " + m_pComponentInstall.Reactor + " to the install position and prompt the user \"" +
						m_pComponentInstall.Message + ".\"";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Fill the reactor combo box
					UpdateEnumLiteralComboBox(m_pComponentInstall.ReactorValidation, _editReactorCombo, m_pComponentInstall.Reactor.toString());

					// Set the message unless the user is editing it
					if (m_pKeyboardFocusTextArea != _editMessage)
					{
						// Unescape the multiline message
						_editMessage.text = unescape(m_pComponentInstall.Message);
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Format the output text
					var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor();
					_runOutputText1.text = "Moving reactor " + m_pComponentInstall.Reactor + " to the install position.";
					_runOutputText2.text = "Temperature: " + pReactor.ActualTemperature() + " C";
					var sActivity:String = pReactor.Activity();
					if (sActivity != "")
					{
						_runOutputText2.text += "\nActivity: " + sActivity + " mCi at " + pReactor.ActivityTime();
					}
				}
			}
			
			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user changes the selection of the combo box
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentInstall.Reactor = parseInt(_editReactorCombo.selectedItem as String);
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentInstall, "sequence/" + nSequenceID + "/component/" + m_pComponentInstall.ID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editMessage)
				{
					// Escape the multiline message
					m_pComponentInstall.Message = escape(_editMessage.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentInstall, "sequence/" + nSequenceID + "/component/" + m_pComponentInstall.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentInstall:ComponentInstall;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle"
				horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
			<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:VGroup gap="20" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="30%">
						<s:Label text="Reactor" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="70%">
						<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="75%" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="top" gap="15" width="100%">
					<s:VGroup horizontalAlign="right" width="30%">
						<s:Spacer height="5" />
						<s:Label text="Message" styleName="TextMedium" />
					</s:VGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="70%">
						<Renderers:AutoTextArea id="_editMessage" styleName="TextMedium" focusIn="OnTextFocusIn(event)" focusOut="OnTextFocusOut(event)"
							fixedHeightInLines="5" multiline="true" width="80%" />
					</s:HGroup>
				</s:HGroup>
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="80%" height="100%">
				<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
				<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
