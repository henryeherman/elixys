<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:Views="Elixys.Views.*" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Style source="Elixys.css" />
	<fx:Script>
		<![CDATA[
			import Elixys.Events.*;
			import Elixys.HTTP.*;
			import Elixys.Loader.LoaderMain;
			import Elixys.Objects.*;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;

			/***
			 *** Initialization functions
			 **/
			
			// Called when the object is created
			private function OnCreationComplete():void
			{
				var pEvaporationTime:Date = new Date();
				pEvaporationTime.setTime(Date.parse("00:05.35"));

				// Add event listeners
				addEventListener(ResizeEvent.RESIZE, OnResize);
				_viewHome.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
				_viewSelect.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
				_viewView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
				_viewEdit.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);

				// Tell the Home page to display the log out button if we are in the AIR player
				if (FindLoaderMain() != null)
				{
					_viewHome.DisplayLogout(true);
					_viewHome.addEventListener(LogoutEvent.LOGOUT, OnLogoutEvent);
				}
			}

			// Step 1: This function is called by the container to set the server
			public function Init1_SetServer(sServer:String, sCredentials:String):void
			{
				// Create the HTTP connection pool
				m_pHTTPConnectionPool = new HTTPConnectionPool(sServer, 80, 5);
				m_pHTTPConnectionPool.addEventListener(HTTPStatusEvent.HTTP_STATUS, OnHTTPStatusEvent);
				m_pHTTPConnectionPool.addEventListener(ProgressEvent.PROGRESS, OnHTTPProgressEvent);
				m_pHTTPConnectionPool.addEventListener(HTTPResponseEvent.HTTPRESPONSE, OnHTTPResponseEvent);
				m_pHTTPConnectionPool.addEventListener(ExceptionEvent.EXCEPTION, OnChildExceptionEvent);
				m_pHTTPConnectionPool.SetCredentials(sCredentials);

				// Load the system configuration
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/configuration", HTTPConnectionPool.MIME_JSON);
			}

			// Step 2: Called when the system configuration has been received
			public function Init2_OnConfiguration(pConfiguration:Configuration):void
			{
				// Remember the system configuration
				m_pServerConfiguration = pConfiguration;
				
				// Pass the system configuration to our child views
				for each (var pViewBase:ViewBase in _viewStack.getChildren())
				{
					pViewBase.UpdateConfiguration(m_pServerConfiguration);
				}

				// Load the current state
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);

				// Start the state timer
				m_pStateTimer = new Timer(1000);
				m_pStateTimer.addEventListener(TimerEvent.TIMER, OnStateTimer);
				m_pStateTimer.start();
			}

			/***
			 *** Member functions
			 **/
			
			// Attempts to locate the LoaderMain class in our ancestory.  This function will return a valid pointer if running
			// in the AIR player or null if running in the browser
			private function FindLoaderMain():LoaderMain
			{
				// Walk our parent tree until we find LoaderMain
				var pParent:DisplayObjectContainer = parent;
				while ((pParent != null) && (pParent as LoaderMain == null))
				{
					pParent = pParent.parent;
				}
				
				// Return LoaderMain if found
				if (pParent != null)
				{
					return (pParent as LoaderMain);
				}
				else
				{
					return null;
				}
			}

			private function UpdateState(pState:State):void
			{
				// Handle the pop up window first
				if (StatePrompt.CheckState(pState.ClientState()))
				{
					// Create and display the pop up window
					if (_viewPrompt == null)
					{
						_viewPrompt = new PromptView();
						_viewPrompt.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
						PopUpManager.addPopUp(_viewPrompt, this, true);
					}

					// Update the pop up state
					_viewPrompt.UpdateState(pState);
					PopUpManager.centerPopUp(_viewPrompt);
					return;
				}
				else if (_viewPrompt != null)
				{
					// Remove the pop up window
					PopUpManager.removePopUp(_viewPrompt);
					_viewPrompt = null;
				}
				
				// Show and update the appropriate state
				if (StateHome.CheckState(pState.ClientState()))
				{
					_viewStack.selectedChild = _viewHome;
					_viewHome.UpdateState(pState);
				}
				else if (StateSelect.CheckState(pState.ClientState()))
				{
					_viewStack.selectedChild = _viewSelect;
					_viewSelect.UpdateState(pState);
				}
				else if (StateSequence.CheckState(StateSequence.VIEWTYPE, pState.ClientState()))
				{
					_viewStack.selectedChild = _viewView;
					_viewView.UpdateState(pState);
				}
				else if (StateSequence.CheckState(StateSequence.EDITTYPE, pState.ClientState()))
				{
					_viewStack.selectedChild = _viewEdit;
					_viewEdit.UpdateState(pState);
				}
				else
				{
					Alert.show("Unknown client state received from server: " + pState.ClientState());
				}
			}
			
			/***
			 *** Callback functions
			 **/

			// Called when the application resizes
			private function OnResize(event:ResizeEvent):void
			{
				// Center the pop up window if one exists
				if (_viewPrompt != null)
				{
					PopUpManager.centerPopUp(_viewPrompt);
				}
			}

			// Called when another object wants to communicate over the HTTP connection
			private function OnHTTPRequestEvent(event:HTTPRequestEvent):void
			{
				// Send the request to the server
				m_pHTTPConnectionPool.SendRequestB(event.m_pHTTPRequest);
			}

			// Called when the status of the HTTP request is know
			private function OnHTTPStatusEvent(event:HTTPStatusEvent):void
			{
				// Notify the user of any error
				if (event.status != 200)
				{
					Alert.show("HTTP request failed: " + event.status);
				}
			}
			
			// Called as the HTTP download progresses
			private function OnHTTPProgressEvent(event:ProgressEvent):void
			{
			}
			
			// Called when the HTTP response is complete
			private function OnHTTPResponseEvent(event:HTTPResponseEvent):void
			{
				// Parse the JSON string
				var pHTTPResponse:HTTPResponse = event.m_pHTTPResponse;
				var sJSON:String = pHTTPResponse.m_pBody.readUTFBytes(pHTTPResponse.m_pBody.length);
				var pJSON:JSONObject = new JSONObject(sJSON);
				switch (pJSON.type)
				{
					case (Configuration.TYPE):
						// Continue initialization process
						var pConfiguration:Configuration = new Configuration(sJSON);
						Init2_OnConfiguration(pConfiguration);
						break;
						
					case (State.TYPE):
						// Update our state
						var pState:State = new State(sJSON);
						UpdateState(pState);
						break;
					
					case (Sequence.TYPE):
						// Update the active view
						var pSequence:Sequence = new Sequence(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateSequence(pSequence);
						break;
					
					case (Component.TYPE):
						// Update the active view
						var pComponent:Component = new Component(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateComponent(pComponent);
						break;
					
					case (Reagent.TYPE):
						// Update the active view
						var pReagent:Reagent = new Reagent(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateReagent(pReagent);
						break;
						
					case (ServerError.TYPE):
						// Determine the type of error
						var pServerError:ServerError = new ServerError(sJSON);
						if (pServerError.Description() == "State misalignment")
						{
							// The server is telling us that our request didn't make sense in the context of its copy of our state.  Ignore
							// this error and simply ask the server for the correct state
							m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);
						}
						else
						{
							// Something went wrong on the server side.  Notify the user
							throw new Error("Server error: " + pServerError.Description());
						}
						break;

					default:
						// Unhandled server message
						throw new Error("Message type \"" + pJSON.type + "\" not handled");
				}
			}
			
			// Called when an exception occurs in a child
			public function OnChildExceptionEvent(event:ExceptionEvent):void
			{
				// Send a log out event to the host
				OnLogoutEvent(new LogoutEvent(event.exception));
			}

			// Called at regular intervals to update the state
			private function OnStateTimer(event:TimerEvent):void
			{
				// Load the current state
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);
			}
			
			// Called when the user logs out
			private function OnLogoutEvent(event:LogoutEvent):void
			{
				// Make sure we are logged in
				if (m_pHTTPConnectionPool != null)
				{
					// Are we running in the AIR player?
					var pLoaderMain:LoaderMain = FindLoaderMain();
					if (pLoaderMain != null)
					{
						// Yes, so notify it of the log out and any error message
						pLoaderMain.LogOut(event.error);
					}
					else
					{
						// No, so display any error message
						if (event.error != "")
						{
							Alert.show(event.error, "Error");
						}
					}
					
					// Stop the state timer
					if (m_pStateTimer != null)
					{
						m_pStateTimer.stop();
					}
					
					// Clean up the connection pool
					m_pHTTPConnectionPool.DropAllConnections();
					m_pHTTPConnectionPool = null;
				}
			}

			// HTTP connection pool to the server
			private var m_pHTTPConnectionPool:HTTPConnectionPool;

			// State update timer
			private var m_pStateTimer:Timer;

			// Server configuration
			private var m_pServerConfiguration:Configuration;

			// Prompt pop up window
			private var _viewPrompt:PromptView;
		]]>
	</fx:Script>
	
	<mx:ViewStack id="_viewStack" creationPolicy="all" width="100%" height="100%">
		<Views:HomeView id="_viewHome" width="100%" height="100%" />
		<Views:SelectView id="_viewSelect" width="100%" height="100%" />
		<Views:ViewView id="_viewView" width="100%" height="100%" />
		<Views:EditView id="_viewEdit" width="100%" height="100%" />
	</mx:ViewStack>
</mx:Canvas>
