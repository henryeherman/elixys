<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" creationComplete="Init2_OnCreationComplete()" width="100%" height="100%">
	<fx:Style source="Elixys.css" />
	<fx:Script>
		<![CDATA[
			import Elixys.Events.*;
			import Elixys.HTTP.*;
			import Elixys.Loader.LoaderMain;
			import Elixys.Objects.*;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.VGroup;

			/***
			 *** Initialization functions
			 **/

			// Step 1: This function is called by the container to set the server
			public function Init1_SetServer(sServer:String, sCredentials:String):void
			{
				// Create the HTTP connection pool
				m_pHTTPConnectionPool = new HTTPConnectionPool(sServer, 80, 5);
				m_pHTTPConnectionPool.addEventListener(HTTPStatusEvent.HTTP_STATUS, OnHTTPStatusEvent);
				m_pHTTPConnectionPool.addEventListener(ProgressEvent.PROGRESS, OnHTTPProgressEvent);
				m_pHTTPConnectionPool.addEventListener(HTTPResponseEvent.HTTPRESPONSE, OnHTTPResponseEvent);
				m_pHTTPConnectionPool.addEventListener(ExceptionEvent.EXCEPTION, OnChildExceptionEvent);
				m_pHTTPConnectionPool.SetCredentials(sCredentials);
			}

			// Step 2: This function is called when this view has been created
			private function Init2_OnCreationComplete():void
			{
				// Show the splash screen
				m_pSplashScreen = new SplashScreen();
				m_pSplashScreen.percentWidth = 100;
				m_pSplashScreen.percentHeight = 100;
				addChild(m_pSplashScreen);
				
				// Add event listeners
				addEventListener(ResizeEvent.RESIZE, OnResize);
				m_pSplashScreen.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);

				// Remember if we are the AIR player
				if (FindLoaderMain() != null)
				{
					m_bAIRPlayer = true;
				}
			}
			
			// Step 3: This function is called after the splash screen has had a chance to display itself
			private function Init3_OnCreateChildrenTimer(event:TimerEvent):void
			{
				// Initialize the child creation variables
				m_nTotalChildren = 17;
				m_nChildrenLoaded = 0;
				
				// Create the first child view
				m_pHomeView = new HomeView();
				m_pHomeView.SetElixysMain(this);
				_viewStack.addChild(m_pHomeView);
				m_pHomeView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
				m_pHomeView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
			}
			
			// Step 4: This function is called once all of our child view have been created
			public function Init4_ChildViewsCreated():void
			{
				// Tell the Home page to display the log out button if we are in the AIR player
				if (m_bAIRPlayer)
				{
					m_pHomeView.DisplayLogout(true);
					m_pHomeView.addEventListener(LogoutEvent.LOGOUT, OnLogoutEvent);
				}
				
				// Load the system configuration
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/configuration", HTTPConnectionPool.MIME_JSON);
			}

			// Step 5: Called when the system configuration has been received
			public function Init5_OnConfiguration(pConfiguration:Configuration):void
			{
				// Remember the system configuration
				m_pServerConfiguration = pConfiguration;
				
				// Pass the system configuration to our child views
				for each (var pViewBase:ViewBase in _viewStack.getChildren())
				{
					pViewBase.UpdateConfiguration(m_pServerConfiguration);
				}

				// Load the current state
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);

				// Start the state timer
				m_pStateTimer = new Timer(1000);
				m_pStateTimer.addEventListener(TimerEvent.TIMER, OnStateTimer);
				m_pStateTimer.start();
				
				// Hide the splash screen and make the view stack visible
				if (m_pSplashScreen != null)
				{
					removeChild(m_pSplashScreen);
				}
				m_pSplashScreen = null;
				_viewStack.visible = true;
				_viewStack.includeInLayout = true;
			}

			/***
			 *** Member functions
			 **/
			
			// Attempts to locate the LoaderMain class in our ancestory.  This function will return a valid pointer if running
			// in the AIR player or null if running in the browser
			private function FindLoaderMain():LoaderMain
			{
				// Walk our parent tree until we find LoaderMain
				var pParent:DisplayObjectContainer = parent;
				while ((pParent != null) && (pParent as LoaderMain == null))
				{
					pParent = pParent.parent;
				}
				
				// Return LoaderMain if found
				if (pParent != null)
				{
					return (pParent as LoaderMain);
				}
				else
				{
					return null;
				}
			}
			
			private function UpdateState(pState:State):void
			{
				// Handle the pop up window first
				if (pState.ClientState().PromptState().Show())
				{
					// Create and display the pop up window
					if (_viewPrompt == null)
					{
						_viewPrompt = new PromptView();
						_viewPrompt.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
						PopUpManager.addPopUp(_viewPrompt, this, true);
					}

					// Update the pop up state
					_viewPrompt.UpdateState(pState);
					PopUpManager.centerPopUp(_viewPrompt);
				}
				else if (_viewPrompt != null)
				{
					// Remove the pop up window
					PopUpManager.removePopUp(_viewPrompt);
					_viewPrompt = null;
				}
				
				// Show and update the appropriate state
				var pView:ViewBase = null;
				if (pState.ClientState().Screen() == StateHome.TYPE)
				{
					pView = m_pHomeView;
				}
				else if (StateSelect.CheckState(pState.ClientState().Screen()))
				{
					pView = m_pSelectView;
				}
				else if (pState.ClientState().Screen() == StateSequence.VIEWTYPE)
				{
					pView = m_pViewView;
				}
				else if (pState.ClientState().Screen() == StateSequence.EDITTYPE)
				{
					pView = m_pEditView;
				}
				else if (pState.ClientState().Screen() == StateSequence.RUNSEQUENCETYPE)
				{
					pView = m_pRunSequenceView;
				}
				else if (pState.ClientState().Screen() == StateSequence.MANUALRUNTYPE)
				{
					pView = m_pManualRunView;
				}
				else
				{
					Alert.show("Unknown client state received from server: " + pState.ClientState().Screen());
				}

				// Did the view change?
				if (pView != _viewStack.selectedChild)
				{
					// Yes, so hide the active subview and change the selected child
					HideActiveSubview();
					_viewStack.selectedChild = pView;
				}
				
				// Update the view state
				pView.UpdateState(pState);

			}
			
			// Shows the specified sequence component
			public function ShowSubview(sComponentType:String, sViewMode:String, pComponentGroup:VGroup):void
			{
				// Locate the desired subview
				var pSubview:SubviewBase;
				switch (sComponentType)
				{
					case ComponentCassette.TYPE:
						pSubview = m_pCassetteSubview;
						break;
					
					case ComponentAdd.TYPE:
						pSubview = m_pAddSubview;
						break;
					
					case ComponentEvaporate.TYPE:
						pSubview = m_pEvaporateSubview;
						break;
					
					case ComponentTransfer.TYPE:
						pSubview = m_pTransferSubview;
						break;
					
					case ComponentElute.TYPE:
						pSubview = m_pEluteSubview;
						break;
					
					case ComponentReact.TYPE:
						pSubview = m_pReactSubview;
						break;
					
					case ComponentPrompt.TYPE:
						pSubview = m_pPromptSubview;
						break;
					
					case ComponentInstall.TYPE:
						pSubview = m_pInstallSubview;
						break;
					
					case ComponentComment.TYPE:
						pSubview = m_pCommentSubview;
						break;
					
					case MessageSubview.TYPE:
						pSubview = m_pMessageSubview;
						break;
					
					default:
						throw Error("Unrecognized component");
				}
				
				// Make sure the subview is position properly and visible
				var pUpperLeft:Point = pComponentGroup.localToGlobal(new Point(0, 0));
				pSubview.x = pUpperLeft.x;
				pSubview.y = pUpperLeft.y;
				pSubview.width = pComponentGroup.width;
				pSubview.height = pComponentGroup.height;
				pSubview.SetViewMode(sViewMode);
				pSubview.visible = true;
				setChildIndex(pSubview, numChildren - 1);

				// Move any current subview to the background
				if ((m_pActiveSubview != null) && (m_pActiveSubview != pSubview))
				{
					m_pActiveSubview.visible = false;
					setChildIndex(m_pActiveSubview, 0);
				}
				
				// Remember the active subview
				m_pActiveSubview = pSubview;
			}
			
			// Returns the active sequence component
			public function GetActiveSubview():SubviewBase
			{
				// Return the active subview
				return m_pActiveSubview;
			}
			
			// Hides the active sequence component
			public function HideActiveSubview():void
			{
				if (m_pActiveSubview != null)
				{
					m_pActiveSubview.visible = false;
					setChildIndex(m_pActiveSubview, 0);
					m_pActiveSubview = null;
				}
			}
			
			// Returns the active sequence view base
			public function GetActiveSequenceView():SequenceViewBase
			{
				return (_viewStack.selectedChild as SequenceViewBase); 
			}
			
			/***
			 *** Callback functions
			 **/

			// Called when a child view is created
			private function OnChildCreationCompleteEvent(event:ChildCreationCompleteEvent):void
			{
				// Check if the child was the splash screen
				if (event.splashScreen)
				{
					// The splash screen has been created.  Set a timer to give the application a change to render itself before
					// we put it to work creating other children
					var pTimer:Timer = new Timer(500, 1);
					pTimer.addEventListener(TimerEvent.TIMER_COMPLETE, Init3_OnCreateChildrenTimer);
					pTimer.start();
					return;
				}

				// Update the splash screen progress bar
				++m_nChildrenLoaded;
				m_pSplashScreen.SetProgress(m_nChildrenLoaded, m_nTotalChildren);

				// Create the next child view
				if (m_pSelectView == null)
				{
					m_pSelectView = new SelectView();
					m_pSelectView.SetElixysMain(this);
					_viewStack.addChild(m_pSelectView);
					m_pSelectView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
					m_pSelectView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pViewView == null)
				{
					m_pViewView = new ViewView();
					m_pViewView.SetElixysMain(this);
					_viewStack.addChild(m_pViewView);
					m_pViewView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
					m_pViewView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pEditView == null)
				{
					m_pEditView = new EditView();
					m_pEditView.SetElixysMain(this);
					_viewStack.addChild(m_pEditView);
					m_pEditView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
					m_pEditView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pRunSequenceView == null)
				{
					m_pRunSequenceView = new RunSequenceView();
					m_pRunSequenceView.SetElixysMain(this);
					_viewStack.addChild(m_pRunSequenceView);
					m_pRunSequenceView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
					m_pRunSequenceView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pManualRunView == null)
				{
					m_pManualRunView = new ManualRunView();
					m_pManualRunView.SetElixysMain(this);
					_viewStack.addChild(m_pManualRunView);
					m_pManualRunView.addEventListener(HTTPRequestEvent.HTTPREQUEST, OnHTTPRequestEvent);
					m_pManualRunView.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pCassetteSubview == null)
				{
					m_pCassetteSubview = new CassetteSubview();
					m_pCassetteSubview.SetElixysMain(this);
					m_pCassetteSubview.visible = false;
					addChildAt(m_pCassetteSubview, 0);
					m_pCassetteSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pAddSubview == null)
				{
					m_pAddSubview = new AddSubview();
					m_pAddSubview.SetElixysMain(this);
					addChild(m_pAddSubview);
					m_pAddSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pEvaporateSubview == null)
				{
					m_pEvaporateSubview = new EvaporateSubview();
					m_pEvaporateSubview.SetElixysMain(this);
					addChild(m_pEvaporateSubview);
					m_pEvaporateSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pTransferSubview == null)
				{
					m_pTransferSubview = new TransferSubview();
					m_pTransferSubview.SetElixysMain(this);
					addChild(m_pTransferSubview);
					m_pTransferSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pEluteSubview == null)
				{
					m_pEluteSubview = new EluteSubview();
					m_pEluteSubview.SetElixysMain(this);
					addChild(m_pEluteSubview);
					m_pEluteSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pReactSubview == null)
				{
					m_pReactSubview = new ReactSubview();
					m_pReactSubview.SetElixysMain(this);
					addChild(m_pReactSubview);
					m_pReactSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pPromptSubview == null)
				{
					m_pPromptSubview = new PromptSubview();
					m_pPromptSubview.SetElixysMain(this);
					addChild(m_pPromptSubview);
					m_pPromptSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pInstallSubview == null)
				{
					m_pInstallSubview = new InstallSubview();
					m_pInstallSubview.SetElixysMain(this);
					addChild(m_pInstallSubview);
					m_pInstallSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pCommentSubview == null)
				{
					m_pCommentSubview = new CommentSubview();
					m_pCommentSubview.SetElixysMain(this);
					addChild(m_pCommentSubview);
					m_pCommentSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else if (m_pMessageSubview == null)
				{
					m_pMessageSubview = new MessageSubview();
					m_pMessageSubview.SetElixysMain(this);
					addChild(m_pMessageSubview);
					m_pMessageSubview.addEventListener(ChildCreationCompleteEvent.CHILDCREATIONCOMPLETE, OnChildCreationCompleteEvent);
				}
				else
				{
					// All child views have been created
					Init4_ChildViewsCreated();
				}
			}

			// Called when the application resizes
			private function OnResize(event:ResizeEvent):void
			{
				// Center the pop up window if one exists
				if (_viewPrompt != null)
				{
					PopUpManager.centerPopUp(_viewPrompt);
				}
			}

			// Called when another object wants to communicate over the HTTP connection
			private function OnHTTPRequestEvent(event:HTTPRequestEvent):void
			{
				// Send the request to the server
				m_pHTTPConnectionPool.SendRequestB(event.m_pHTTPRequest);
			}

			// Called when the status of the HTTP request is know
			private function OnHTTPStatusEvent(event:HTTPStatusEvent):void
			{
				// Notify the user of any error
				if (event.status != 200)
				{
					Alert.show("HTTP request failed: " + event.status);
				}
			}
			
			// Called as the HTTP download progresses
			private function OnHTTPProgressEvent(event:ProgressEvent):void
			{
			}
			
			// Called when the HTTP response is complete
			private function OnHTTPResponseEvent(event:HTTPResponseEvent):void
			{
				// Parse the JSON string
				var pHTTPResponse:HTTPResponse = event.m_pHTTPResponse;
				var sJSON:String = pHTTPResponse.m_pBody.readUTFBytes(pHTTPResponse.m_pBody.length);
				var pJSON:JSONObject = new JSONObject(sJSON);
				switch (pJSON.type)
				{
					case (Configuration.TYPE):
						// Continue initialization process
						var pConfiguration:Configuration = new Configuration(sJSON);
						Init5_OnConfiguration(pConfiguration);
						break;
						
					case (State.TYPE):
						// Update our state
						var pState:State = new State(sJSON);
						UpdateState(pState);
						break;
					
					case (Sequence.TYPE):
						// Update the active view
						var pSequence:Sequence = new Sequence(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateSequence(pSequence);
						break;
					
					case (Component.TYPE):
						// Update the active view
						var pComponent:Component = new Component(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateComponent(pComponent);
						break;
					
					case (Reagents.TYPE):
						// Update the active view
						var pReagents:Reagents = new Reagents(sJSON);
						(_viewStack.selectedChild as ViewBase).UpdateReagents(pReagents.ReagentArray());
						break;
						
					case (ServerError.TYPE):
						// Determine the type of error
						var pServerError:ServerError = new ServerError(sJSON);
						if (pServerError.Description() == "State misalignment")
						{
							// The server is telling us that our request didn't make sense in the context of its copy of our state.  Ignore
							// this error and simply ask the server for the correct state
							m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);
						}
						else
						{
							// Something went wrong on the server side.  Notify the user
							throw new Error("Server error: " + pServerError.Description());
						}
						break;

					default:
						// Unhandled server message
						throw new Error("Message type \"" + pJSON.type + "\" not handled");
				}
			}
			
			// Called when an exception occurs in a child
			public function OnChildExceptionEvent(event:ExceptionEvent):void
			{
				// Send a log out event to the host
				OnLogoutEvent(new LogoutEvent(event.exception));
			}

			// Called at regular intervals to update the state
			private function OnStateTimer(event:TimerEvent):void
			{
				// Load the current state
				m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys/state", HTTPConnectionPool.MIME_JSON);
			}
			
			// Called when the user logs out
			private function OnLogoutEvent(event:LogoutEvent):void
			{
				// Make sure we are logged in
				if (m_pHTTPConnectionPool != null)
				{
					// Are we running in the AIR player?
					var pLoaderMain:LoaderMain = FindLoaderMain();
					if (pLoaderMain != null)
					{
						// Yes, so notify it of the log out and any error message
						pLoaderMain.LogOut(event.error);
					}
					else
					{
						// No, so display any error message
						if (event.error != "")
						{
							Alert.show(event.error, "Error");
						}
					}
					
					// Stop the state timer
					if (m_pStateTimer != null)
					{
						m_pStateTimer.stop();
					}
					
					// Clean up the connection pool
					m_pHTTPConnectionPool.DropAllConnections();
					m_pHTTPConnectionPool = null;
				}
			}

			// Initializaton and AIR player flags
			private var m_bInitialized:Boolean = false;
			private var m_bAIRPlayer:Boolean = false;

			// Splash screen and child creation variables
			private var m_pSplashScreen:SplashScreen = null;
			private var m_nTotalChildren:uint = 0;
			private var m_nChildrenLoaded:uint = 0;

			// HTTP connection pool to the server
			private var m_pHTTPConnectionPool:HTTPConnectionPool = null;

			// Child views
			private var m_pHomeView:HomeView = null;
			private var m_pSelectView:SelectView = null;
			private var m_pViewView:ViewView = null;
			private var m_pEditView:EditView = null;
			private var m_pRunSequenceView:RunSequenceView = null;
			private var m_pManualRunView:ManualRunView = null;
			
			// Child subviews
			private var m_pCassetteSubview:CassetteSubview = null;
			private var m_pAddSubview:AddSubview = null;
			private var m_pEvaporateSubview:EvaporateSubview = null;
			private var m_pTransferSubview:TransferSubview = null;
			private var m_pEluteSubview:EluteSubview = null;
			private var m_pReactSubview:ReactSubview = null;
			private var m_pPromptSubview:PromptSubview = null;
			private var m_pInstallSubview:InstallSubview = null;
			private var m_pCommentSubview:CommentSubview = null;
			private var m_pActiveSubview:SubviewBase = null;
			private var m_pMessageSubview:SubviewBase = null;
			
			// State update timer
			private var m_pStateTimer:Timer;

			// Server configuration
			private var m_pServerConfiguration:Configuration;

			// Prompt pop up window
			private var _viewPrompt:PromptView;
		]]>
	</fx:Script>
	
	<mx:ViewStack id="_viewStack" visible="false" includeInLayout="false" z="1" width="100%" height="100%" />
</mx:Canvas>
