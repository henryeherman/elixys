<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" width="100%" height="100%" xmlns:Renderers="Elixys.Views.Renderers.*">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentEvaporate;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			import Elixys.Objects.StateSequence;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentEvaporate = new ComponentEvaporate(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Format the output text
					_outputText.text = "Evaporate reactor " + m_pComponentEvaporate.Reactor + " at " + m_pComponentEvaporate.EvaporationTemperature +
						" C for " + m_pComponentEvaporate.Duration + " seconds and cool to " + m_pComponentEvaporate.FinalTemperature + 
						" C.  Stir at " + m_pComponentEvaporate.StirSpeed + " rpm.";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Fill the reactor combo box
					UpdateEnumLiteralComboBox(m_pComponentEvaporate.ReactorValidation, _editReactorCombo, m_pComponentEvaporate.Reactor.toString());
					
					// Set all evaporation variables except the one the user is editing
					if (m_pKeyboardFocusTextArea != _editDuration)
					{
						_editDuration.text = m_pComponentEvaporate.Duration
					}
					if (m_pKeyboardFocusTextArea != _editEvaporationTemperature)
					{
						_editEvaporationTemperature.text = m_pComponentEvaporate.EvaporationTemperature;
					}
					if (m_pKeyboardFocusTextArea != _editFinalTemperature)
					{
						_editFinalTemperature.text = m_pComponentEvaporate.FinalTemperature;
					}
					if (m_pKeyboardFocusTextArea != _editStirSpeed)
					{
						_editStirSpeed.text = m_pComponentEvaporate.StirSpeed.toString();
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Format the output text
					var pStateSequence:StateSequence = m_pElixysMain.GetActiveSequenceView().GetStateSequence();
					var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor();
					_runOutputText1.text = "Evaporating reactor " + m_pComponentEvaporate.Reactor + " at " + 
						m_pComponentEvaporate.EvaporationTemperature + " C for " + m_pComponentEvaporate.Duration +
						" seconds and cooling to " + m_pComponentEvaporate.FinalTemperature + " C.  Stirring at " +
						m_pComponentEvaporate.StirSpeed + " rpm.";
					_runOutputText2.text = "Status: " + pStateSequence.ServerState().Status() + "\nTemperature: " +
						pReactor.ActualTemperature() + " C";
					var sActivity:String = pReactor.Activity();
					if (sActivity != "")
					{
						_runOutputText2.text += "\nActivity: " + sActivity + " mCi at " + pReactor.ActivityTime();
					}
					_runReactorText2.text = "Reactor " + m_pComponentEvaporate.Reactor;
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user changes the selection of the combo box
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentEvaporate.Reactor = parseInt(_editReactorCombo.selectedItem as String);
				
				// Removing the following line causes a compile error for reasons I don't understand
				var pElixysMain:ElixysMain;

				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentEvaporate, "sequence/" + nSequenceID + "/component/" + m_pComponentEvaporate.ID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editDuration)
				{
					m_pComponentEvaporate.Duration = _editDuration.text;
				}
				if (m_pKeyboardFocusTextArea == _editEvaporationTemperature)
				{
					m_pComponentEvaporate.EvaporationTemperature = _editEvaporationTemperature.text;
				}
				if (m_pKeyboardFocusTextArea == _editFinalTemperature)
				{
					m_pComponentEvaporate.FinalTemperature = _editFinalTemperature.text;
				}
				if (m_pKeyboardFocusTextArea == _editStirSpeed)
				{
					m_pComponentEvaporate.StirSpeed = parseInt(_editStirSpeed.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentEvaporate, "sequence/" + nSequenceID + "/component/" +
					m_pComponentEvaporate.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentEvaporate:ComponentEvaporate;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle"
				horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
			<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:VGroup gap="20" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="50%">
						<s:Label text="Reactor" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="50%">
						<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="75%" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="50%">
						<s:Label text="Duration" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="50%">
						<Renderers:AutoTextArea id="_editDuration" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
							focusOut="OnTextFocusOut(event)" width="100" />
						<s:Label text="sec" styleName="TextMedium" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="50%">
						<s:Label text="Evaporation Temperature" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="50%">
						<Renderers:AutoTextArea id="_editEvaporationTemperature" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
							focusOut="OnTextFocusOut(event)" />
						<s:Label text="C" styleName="TextMedium" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="50%">
						<s:Label text="Final Temperature" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="50%">
						<Renderers:AutoTextArea id="_editFinalTemperature" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
							focusOut="OnTextFocusOut(event)" />
						<s:Label text="C" styleName="TextMedium" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="50%">
						<s:Label text="Stir speed" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" verticalAlign="middle" gap="10" width="50%">
						<Renderers:AutoTextArea id="_editStirSpeed" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
							focusOut="OnTextFocusOut(event)" />
						<s:Label text="rpm" styleName="TextMedium" />
					</s:HGroup>
				</s:HGroup>
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:HGroup paddingLeft="15" paddingRight="15" gap="15" width="100%" height="100%">
				<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="100%" height="100%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:VGroup>
				<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%">
					<s:BorderContainer backgroundColor="0x777777" width="320" height="320" />
					<mx:Text id="_runReactorText2" styleName="TextMedium" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
