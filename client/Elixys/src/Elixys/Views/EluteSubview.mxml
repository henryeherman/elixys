<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentElute;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentElute = new ComponentElute(null, pComponent);

				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Clear the reagent and target
					m_pReagent = null;
					m_pTarget = null;

					// Look up the reagent and target
					RequestSequenceReagent(m_pComponentElute.Reagent);
					RequestSequenceReagent(m_pComponentElute.Target);
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Fill the reactor combo box
					UpdateEnumLiteralComboBox(m_pComponentElute.ReactorValidation, _editReactorCombo, m_pComponentElute.Reactor.toString());
					
					// Initialize the reagent and target combo boxes
					UpdateEnumReagentComboBox(m_pComponentElute.ReagentValidation, _editReagentCombo, m_pComponentElute.Reagent);
					UpdateEnumTargetComboBox(m_pComponentElute.TargetValidation, _editTargetCombo, m_pComponentElute.Target);
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Clear the reagent and target
					m_pReagent = null;
					m_pTarget = null;
					
					// Look up the reagent and target
					RequestSequenceReagent(m_pComponentElute.Reagent);
					RequestSequenceReagent(m_pComponentElute.Target);
				}
			}

			// Called when reagent details arrive from the server
			public override function UpdateReagent(pReagent:Reagent):void
			{
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Remember the reagent or target
					if (pReagent.ReagentID == m_pComponentElute.Reagent)
					{
						m_pReagent = pReagent;
					}
					else if (pReagent.ReagentID == m_pComponentElute.Target)
					{
						m_pTarget = pReagent;
					}
					
					// Format the output text
					if ((m_pReagent != null) && (m_pTarget != null))
					{
						_outputText.text = "Elute the " + m_pTarget.Description + " with " + m_pReagent.Description + " into reactor " +
							m_pComponentElute.Reactor + ".";
					}
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Update the combo box item
					UpdateEnumReagentComboBoxItem(pReagent, _editReagentCombo);
					UpdateEnumReagentComboBoxItem(pReagent, _editTargetCombo);
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Remember the reagent or target
					if (pReagent.ReagentID == m_pComponentElute.Reagent)
					{
						m_pReagent = pReagent;
					}
					else if (pReagent.ReagentID == m_pComponentElute.Target)
					{
						m_pTarget = pReagent;
					}
					
					// Removing the following line causes a compile error for reasons I don't understand
					var pElixysMain:ElixysMain;

					// Format the output text
					if ((m_pReagent != null) && (m_pTarget != null))
					{
						var pReactor:ReactorState = m_pElixysMain.GetActiveSequenceView().GetReactor();
						_runOutputText1.text = "Eluting the " + m_pTarget.Description + " with " + m_pReagent.Description + 
							" into reactor " + m_pComponentElute.Reactor + ".";
						_runOutputText2.text = "Temperature: " + pReactor.ActualTemperature() + " C";
						var sActivity:String = pReactor.Activity();
						if (sActivity != "")
						{
							_runOutputText2.text += "\nActivity: " + sActivity + " mCi at " + pReactor.ActivityTime();
						}
						_runReactorText2.text = "Reactor " + m_pComponentElute.Reactor;
					}
				}
			}
			
			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);
				
				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}

			// Called when the user changes the selection in one of the combo boxes
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentElute.Reactor = parseInt(_editReactorCombo.selectedItem as String);
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentElute, "sequence/" + nSequenceID + "/component/" + m_pComponentElute.ID);
			}
			protected function OnReagentChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentElute.Reagent = (_editReagentCombo.selectedItem as Reagent).ReagentID;
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentElute, "sequence/" + nSequenceID + "/component/" + m_pComponentElute.ID);
			}
			protected function OnTargetChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentElute.Target = (_editTargetCombo.selectedItem as Reagent).ReagentID;
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentElute, "sequence/" + nSequenceID + "/component/" + m_pComponentElute.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component, reagent and target
			private var m_pComponentElute:ComponentElute;
			private var m_pReagent:Reagent;
			private var m_pTarget:Reagent;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle"
				horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
			<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:VGroup gap="20" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="30%">
						<s:Label text="Reactor" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" width="70%">
						<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="75%" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="30%">
						<s:Label text="Reagent" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" width="70%">
						<s:ComboBox id="_editReagentCombo" labelField="Name" change="OnReagentChange(event)" styleName="TextMedium" width="75%" />
					</s:HGroup>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" gap="15" width="100%">
					<s:HGroup horizontalAlign="right" width="30%">
						<s:Label text="Target" styleName="TextMedium" />
					</s:HGroup>
					<s:HGroup horizontalAlign="left" width="70%">
						<s:ComboBox id="_editTargetCombo" labelField="Name" change="OnTargetChange(event)" styleName="TextMedium" width="75%" />
					</s:HGroup>
				</s:HGroup>
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" horizontalAlign="center" verticalAlign="middle" horizontalCenter="0"
				verticalCenter="0" width="100%" height="100%">
			<s:HGroup paddingLeft="15" paddingRight="15" gap="15" width="100%" height="100%">
				<s:VGroup horizontalAlign="left" verticalAlign="middle" gap="15" width="100%" height="100%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:VGroup>
				<s:VGroup horizontalAlign="center" verticalAlign="middle" height="100%">
					<s:BorderContainer backgroundColor="0x777777" width="320" height="320" />
					<mx:Text id="_runReactorText2" styleName="TextMedium" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
