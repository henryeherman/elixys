<?xml version="1.0" encoding="utf-8"?>
<Views:SequenceViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPConnection;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.*;
			
			import mx.collections.ArrayList;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.components.BorderContainer;
			import spark.components.Button;
			import spark.skins.spark.BorderContainerSkin;
			import spark.skins.spark.ButtonSkin;

			/***
			 * Member functions
			 **/
						
			// Update state
			public override function UpdateState(pState:State):void
			{
				// Create the Manual Run state and remember the step
				var pStateManualRun:StateManualRun = new StateManualRun(null, pState);
				m_sManualRunStep = pStateManualRun.ManualRunStep();

				// Check if we are the user running the system
				var sRunUsername:String = pStateManualRun.ServerState().RunState().Username();
				var sCurrentUsername:String = pStateManualRun.User().Username();
				m_bRunningSystem = (sRunUsername == sCurrentUsername);
				
				// Set the view mode
				if (pStateManualRun.ManualRunStep() == "RUN")
				{
					// View the component in run mode
					m_sViewMode = SubviewBase.RUNMODE;
				}
				else
				{
					// View each component in either edit or view mode depending on if we are running the system
					if (m_bRunningSystem)
					{
						m_sViewMode = SubviewBase.EDITMODE;
					}
					else
					{
						m_sViewMode = SubviewBase.VIEWMODE;
					}
				}
				
				// Call the base function with our type
				UpdateSequenceState(pState, StateSequence.MANUALRUNTYPE);
				
			}

			// Update sequence
			public override function UpdateSequence(pSequence:Sequence):void
			{
				// Update the sequence
				UpdateSequenceSequence(pSequence);

				// Check our mode
				if (m_sManualRunStep == "SELECT")
				{
					// There is no component in the content pane so display the message view instead
					m_pElixysMain.ShowSubview(MessageSubview.TYPE, SubviewBase.VIEWMODE, m_pComponentGroup);
					var pMessageSubview:MessageSubview = m_pElixysMain.GetActiveSubview() as MessageSubview;
					pMessageSubview.SetText("Select the next unit operation from the toolbox");
					
					// Clear any selected sequence component
					m_nComponentID = 0;
					_sequenceList.invalidateDisplayList();
				}
				else
				{
					// Request the currently selected sequence component from the server
					RequestSequenceComponent(m_nSequenceID, m_nComponentID);
				}
			}
			
			// Update component
			public override function UpdateComponent(pComponent:Component):void
			{
				// Update the sequence component
				UpdateSequenceComponent(pComponent);
			}
			
			// Update reagent
			public override function UpdateReagents(pReagents:Array):void
			{
				// Update the sequence reagent
				UpdateSequenceReagents(pReagents);
			}
			
			// Returns the manual run step
			public function GetManualRunStep():String
			{
				return m_sManualRunStep;
			}
			
			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set our view mode
				m_sViewMode = SubviewBase.VIEWMODE;
				
				// Set the base class variables
				m_pOnButtonClick = OnButtonClick;
				m_pUnitOperationsList = _unitOperationList;
				m_pSequenceName = _sequenceName;
				m_pSequenceList = _sequenceList;
				m_pNavigationButtons = _navigationButtons;
				m_pComponentGroup = _componentGroup;
			}
				
			// Button click handlers
			public function OnToolboxClick(event:MouseEvent):void
			{
				// Only handle toolbox clicks when we are the user running the system and in "SELECT" mode
				if (m_bRunningSystem && (m_sManualRunStep == "SELECT"))
				{
					// Determine what unit operation the user clicked on
					var pLabel:Label = FindDecendentByName(event.target as DisplayObjectContainer, "_unitOperationLabel") as Label;

					// Append the component to the sequence
					InsertUnitOperation(pLabel.text, -1);
				}
			}
			public function OnSequenceClick(event:MouseEvent):void
			{
				// Only handle sequence clicks when we are the user running the system and in "CASSETTE" mode
				if (m_bRunningSystem && (m_sManualRunStep == "CASSETTE"))
				{
					// Determine what unit operation the user clicked on
					var pLabel:Label = FindDecendentByName(event.target as DisplayObjectContainer, "_componentLabel") as Label;
					
					// Pass the click on to the server
					OnClickInternal(pLabel.id);
				}
			}
			public function OnButtonClick(event:MouseEvent):void
			{
				// Pass the click on to the server
				OnClickInternal((event.target as spark.components.Button).id)
			}
			public function OnClickInternal(sID:String):void
			{
				// Create a POST request
				var pPostSequence:PostSequence = new PostSequence();
				pPostSequence.TargetID(sID);
				
				// Pass the request to the server
				DoPost(pPostSequence, "MANUALRUN");
			}
			
			/***
			 * Member variables
			 **/
			
			// Manual run step
			private var m_sManualRunStep:String = "";

			// Flag that specifies if we are the user running the system
			private var m_bRunningSystem:Boolean = false;
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingLeft="20"
			paddingRight="20" paddingTop="20" paddingBottom="20" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label styleName="TextMedium" text="Toolbox" />
			<s:List id="_unitOperationList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									// Formats the label text
									override public function set data(value:Object):void
									{
										super.data = value;
										if (value != null)
										{
											_unitOperationLabel.text = value as String;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="hovered" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:BorderContainer click="outerDocument.OnToolboxClick(event)" width="150" height="40">
									<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
										<s:Label id="_unitOperationLabel" name="_unitOperationLabel" styleName="TextMedium" />
									</s:VGroup>
								</s:BorderContainer>
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label id="_sequenceName" styleName="TextMedium" text="" />
			<s:List id="_sequenceList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									// Formats the button text
									override public function set data(value:Object):void
									{
										// Set the base class data
										super.data = value;
										
										if (value != null)
										{
											// Set the background color
											if ((outerDocument.GetManualRunStep() != "SELECT") && (outerDocument.GetComponentID() == data.ID))
											{
												_componentContainer.setStyle("backgroundColor", "0xbbbbbb");
											}
											else
											{
												_componentContainer.setStyle("backgroundColor", "0xffffff");
											}
											
											// Format the button text
											_componentLabel.text = ""
											if (data.DisplayIndex != 0)
											{
												_componentLabel.text = data.DisplayIndex + ". ";
											}
											_componentLabel.text += data.Name;
											_componentLabel.id = data.ID;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:BorderContainer id="_componentContainer" click="outerDocument.OnSequenceClick(event)" width="150" height="40">
									<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
										<s:Label id="_componentLabel" name="_componentLabel" styleName="TextMedium" />
									</s:VGroup>
								</s:BorderContainer>
								<s:Spacer id="_insertionSpacer" visible="false" includeInLayout="false" width="100%" height="15" />
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="right" verticalAlign="middle" gap="20" width="100%" height="100%">
			<s:HGroup id="_navigationButtons" gap="20" />
			<s:VGroup id="_componentGroup" width="100%" height="100%" />
		</s:VGroup>
	</s:HGroup>
</Views:SequenceViewBase>
