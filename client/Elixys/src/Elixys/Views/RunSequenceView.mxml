<?xml version="1.0" encoding="utf-8"?>
<Views:SequenceViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPConnection;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.*;
			
			import spark.components.Button;

			/***
			 * Member functions
			 **/
			
			// Update state
			public override function UpdateState(pState:State):void
			{
				// Call the base function with our type
				UpdateSequenceState(pState, StateSequence.RUNSEQUENCETYPE);
			}
			
			// Update sequence
			public override function UpdateSequence(pSequence:Sequence):void
			{
				// Hide the cassettes when we display the sequence
				pSequence.HideCassettes(true);
				
				// Update the sequence sequence
				UpdateSequenceSequence(pSequence);

				// Request the currently selected sequence component from the server
				RequestSequenceComponent(m_nSequenceID, m_nComponentID);
			}
			
			// Update component
			public override function UpdateComponent(pComponent:Component):void
			{
				// Update the sequence component
				UpdateSequenceComponent(pComponent);
			}
			
			// Update reagent
			public override function UpdateReagent(pReagent:Reagent):void
			{
				// Update the sequence reagent
				UpdateSequenceReagent(pReagent);
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			public function OnCreationComplete():void
			{
				// Set the base class variables
				m_pOnButtonClick = OnButtonClick;
				m_pSequenceName = _sequenceName;
				m_pSequenceList = _sequenceList;
				m_pNavigationButtons = _navigationButtons;
				m_pViewStack = _viewStack;
				m_pCassetteSubview = _cassetteSubview;
				m_pAddSubview = _addSubview;
				m_pEvaporateSubview = _evaporateSubview;
				m_pTransferSubview = _transferSubview;
				m_pEluteSubview = _eluteSubview;
				m_pReactSubview = _reactSubview;
				m_pPromptSubview = _promptSubview;
				m_pInstallSubview = _installSubview;
				m_pCommentSubview = _commentSubview;
				m_pActivitySubview = _activitySubview;
				
				// Set the subview parents
				SetSubviewParents();
			}

			// Button click handler
			public function OnButtonClick(event:MouseEvent):void
			{
				// Create a POST request
				var pPostSequence:PostSequence = new PostSequence();
				pPostSequence.TargetID((event.target as spark.components.Button).id);
			
				// Pass the request to the server
				DoPost(pPostSequence, "RUNSEQUENCE");
			}
		]]>
	</fx:Script>
	
	<s:HGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" paddingLeft="20"
			paddingRight="20" paddingTop="20" paddingBottom="20" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" height="100%">
			<s:Label id="_sequenceName" styleName="TextMedium" text="" />
			<s:List id="_sequenceList" requireSelection="true" height="100%">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false">
							<fx:Script>
								<![CDATA[
									// Formats the button text
									override public function set data(value:Object):void
									{
										// Set the base class data
										super.data = value;
										
										if (value != null)
										{
											// Set the background color
											if (outerDocument.GetComponentID() == data.ID)
											{
												_componentContainer.setStyle("backgroundColor", "0xbbbbbb");
											}
											else
											{
												_componentContainer.setStyle("backgroundColor", "0xffffff");
											}
											
											// Format the component text
											_componentLabel.text = ""
											if (data.DisplayIndex != 0)
											{
												_componentLabel.text = data.DisplayIndex + ". ";
											}
											_componentLabel.text += data.Name;
											_componentLabel.id = data.ID;
										}
									}
								]]>
							</fx:Script>
							<s:states>
								<s:State name="normal" />
								<s:State name="selected" />
							</s:states>
							<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7">
								<s:BorderContainer id="_componentContainer" width="150" height="40">
									<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
										<s:Label id="_componentLabel" name="_componentLabel" styleName="TextMedium" />
									</s:VGroup>
								</s:BorderContainer>
							</s:VGroup>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:VGroup>
		<s:VGroup horizontalAlign="right" verticalAlign="middle" gap="20" width="100%" height="100%">
			<s:HGroup id="_navigationButtons" gap="20" />
			<mx:ViewStack id="_viewStack" width="100%" height="100%">
				<Views:CassetteSubview id="_cassetteSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:AddSubview id="_addSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:EvaporateSubview id="_evaporateSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:TransferSubview id="_transferSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:EluteSubview id="_eluteSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:ReactSubview id="_reactSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:PromptSubview id="_promptSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:InstallSubview id="_installSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:CommentSubview id="_commentSubview" m_sViewMode="Run" width="100%" height="100%" />
				<Views:ActivitySubview id="_activitySubview" m_sViewMode="Run" width="100%" height="100%" />
			</mx:ViewStack>
		</s:VGroup>
	</s:HGroup>
</Views:SequenceViewBase>
