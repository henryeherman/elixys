<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
			  borderStyle="solid" creationPolicy="all" creationComplete="OnCreationComplete()" width="100%" height="100%">
	<fx:Style source="Elixys.css" />

	<fx:Script>
		<![CDATA[
			import Elixys.Events.ExceptionEvent;
			import Elixys.Events.HTTPResponseEvent;
			import Elixys.Events.LogoutEvent;
			import Elixys.HTTP.HTTPConnectionPool;
			import Elixys.Views.ElixysMain;
			
			import flash.events.HTTPStatusEvent;
			
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.events.CloseEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			/*** 
			 * Member functions
			 ***/
			
			// Called by the SWF when the user logs out
			public function LogOut(sError:String):void
			{
				// Make sure we're logged in
				if (m_pHTTPConnectionPool != null)
				{
					// Clean up the connection pool
					m_pHTTPConnectionPool.DropAllConnections();
					m_pHTTPConnectionPool = null;
					
					// Remove the SWF
					_viewApplication.removeAllChildren();
					if (m_bDynamicSWF)
					{
						var pSWFLoader:SWFLoader = m_pSWF as SWFLoader;
						pSWFLoader.unloadAndStop();
					}
					m_pSWF = null;
					
					// Show the login screen
					this.selectedChild = _viewLogin;
					
					// Display a message if we received an error string
					if (sError != "")
					{
						Alert.show(sError, "Connection to server lost");
					}
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when the application is created
			private function OnCreationComplete():void
			{
				// Add event listeners
				addEventListener(ResizeEvent.RESIZE, OnResizeEvent);
			}

			// Called when the user clicks "Connect"
			private function OnConnect():void
			{
				// Make sure the user has entered text in each field
				if (_server.text.length == 0)
				{
					Alert.show("Please enter the name of the server.");
					return;
				}
				if (_username.text.length == 0)
				{
					Alert.show("Please enter your username.");
					return;
				}
				if (_password.text.length == 0)
				{
					Alert.show("Please enter your password.");
					return;
				}
				
				// Create the HTTP connection pool
				m_pHTTPConnectionPool = new HTTPConnectionPool(_server.text, 80, 1);
				m_pHTTPConnectionPool.addEventListener(Event.CONNECT, OnHTTPConnectEvent);
				m_pHTTPConnectionPool.addEventListener(HTTPStatusEvent.HTTP_STATUS, OnHTTPStatusEvent);
				m_pHTTPConnectionPool.addEventListener(ProgressEvent.PROGRESS, OnHTTPProgressEvent);
				m_pHTTPConnectionPool.addEventListener(HTTPResponseEvent.HTTPRESPONSE, OnHTTPResponseEvent);
				m_pHTTPConnectionPool.addEventListener(ExceptionEvent.EXCEPTION, OnChildExceptionEvent);
				m_pHTTPConnectionPool.SetCredentialsRaw(_username.text, _password.text);
				
				// Set the progress text and show the progress pop up
				m_pLoaderPopUp = new LoaderPopUp();
				PopUpManager.addPopUp(m_pLoaderPopUp, this, true);
				PopUpManager.centerPopUp(m_pLoaderPopUp); 
				m_pLoaderPopUp.SetProgress(0);

				// Send a request to the server depending on our mode (dynamic or static)
				if (m_bDynamicSWF)
				{
					// We are dynamically loading the SWF
					m_pHTTPConnectionPool.SendRequestA("GET", "/Elixys.swf", HTTPConnectionPool.MIME_FLASH);
				}
				else
				{
					// The SWF is embedded.  Are we in debug mode?
					if (!m_bDebug)
					{
						// No, so we still want to validate the user's credentials
						m_pHTTPConnectionPool.SendRequestA("GET", "/index.html", HTTPConnectionPool.MIME_HTML);
					}
					else
					{
						// Yes, so skip the authentication step
						DisplayElixys(null);
						return;
					}
				}
			}
			
			private function DisplayElixys(pSWFBody:ByteArray):void
			{
				// Load and show the main Elixys window
				if (m_bDynamicSWF)
				{
					// Interpret the HTTP response body as a SWF
					var pSWFLoader:SWFLoader = new SWFLoader();
					pSWFLoader.percentWidth = 100;
					pSWFLoader.percentHeight = 100;
					pSWFLoader.loaderContext = new LoaderContext();
					pSWFLoader.loaderContext.allowCodeImport = true;
					pSWFLoader.loaderContext.parameters =
						{
							"server": _server.text,
							"credentials": m_pHTTPConnectionPool.GetCredentials()
						};
					pSWFLoader.load(pSWFBody);
					m_pSWF = pSWFLoader;
				}
				else
				{
					// Create an instance of the static SWF
					var pElixysSWF:ElixysMain = new ElixysMain();
					pElixysSWF.Init1_SetServer(_server.text, m_pHTTPConnectionPool.GetCredentials());
					pElixysSWF.percentWidth = 100;
					pElixysSWF.percentHeight = 100;
					m_pSWF = pElixysSWF;
				}
				
				// Hide the loader pop up and show the SWF
				PopUpManager.removePopUp(m_pLoaderPopUp);
				m_pLoaderPopUp = null;
				_viewApplication.addChild(m_pSWF);
				this.selectedChild = _viewApplication;
			}

			private function OnHTTPConnectEvent(event:Event):void
			{
				// Set the progress text
				m_pLoaderPopUp.SetProgress(15);
			}

			// Called when the status of the HTTP request is know
			private function OnHTTPStatusEvent(event:HTTPStatusEvent):void
			{
				// Check for success
				if (event.status == 200)
				{
					// Set the progress text
					m_pLoaderPopUp.SetProgress(30);
				}
				else
				{
					// Give a specific message for authentication errors
					if (event.status == 401)
					{
						Alert.show("Invalid username or password", "Authentication Error", 4, null, OnAlertClosed);
					}
					else
					{
						Alert.show("Unexpected response received from server", "Error", 4, null, OnAlertClosed);
					}
				}
			}
			
			// Called as the HTTP download progresses
			private function OnHTTPProgressEvent(event:ProgressEvent):void
			{
				// Update the progress bar
				var nProgress:Number = 30 + (event.bytesLoaded * 70 / event.bytesTotal);
				m_pLoaderPopUp.SetProgress(nProgress);
			}
			
			// Called when the HTTP response is complete
			private function OnHTTPResponseEvent(event:HTTPResponseEvent):void
			{
				// Make sure the request succeeded
				if (event.m_pHTTPResponse.m_nStatusCode == 200)
				{
					// Display the main Elixys window
					DisplayElixys(event.m_pHTTPResponse.m_pBody);
				}
			}
						
			// Called when an exception occurs in a child
			public function OnChildExceptionEvent(event:ExceptionEvent):void
			{
				// Display the alert window
				Alert.show(event.exception, "Error", 4, null, OnAlertClosed);
			}
			
			// Called when the user closes the alert window
			private function OnAlertClosed(event:CloseEvent):void
			{
				// Remove the loader pop up if it exists
				if (m_pLoaderPopUp != null)
				{
					PopUpManager.removePopUp(m_pLoaderPopUp);
					m_pLoaderPopUp = null;
				}
			}
			
			// Called when the application resizes
			public function OnResizeEvent(event:ResizeEvent):void
			{
				if (m_pLoaderPopUp != null)
				{
					PopUpManager.centerPopUp(m_pLoaderPopUp);
				}
			}

			/*** 
			 *** Data members
			 ***/
			
			// Flag that specifies if Elixys.swf is loaded dynamically or statically
			public var m_bDynamicSWF:Boolean = true;

			// Main SWF window, either loaded dynamically or statically
			private var m_pSWF:DisplayObject;

			// Flag to used to skip authentication when communicating with WSGI directly rather than Apache
			public var m_bDebug:Boolean = false;
			
			// HTTP connection pool to the server
			private var m_pHTTPConnectionPool:HTTPConnectionPool;
			
			// Loader pop up window
			private var m_pLoaderPopUp:LoaderPopUp;
		]]>
	</fx:Script>
		
	<!-- The layout of this AIR application is straightforward: two views in a ViewStack container, one for the user's login credentials and
		the other for displaying the Elixys SWF. -->
	<mx:Canvas id="_viewLogin" width="100%" height="100%">
		<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" gap="20" width="70%" height="70%">
			<s:Label text="Enter the server IP address and your credentials:" styleName="label" />
			<s:HGroup gap="15" width="100%">
				<s:VGroup horizontalAlign="right" gap="15">
					<s:Label text="Server" verticalAlign="middle" styleName="label" height="40" />
					<s:Label text="Username" verticalAlign="middle" styleName="label" height="40" />
					<s:Label text="Password" verticalAlign="middle" styleName="label" height="40" />
				</s:VGroup>
				<s:VGroup gap="15" width="100%">
					<s:TextArea id="_server" text="ec2-75-101-168-62.compute-1.amazonaws.com" styleName="textarea" verticalAlign="middle" width="100%" height="40" />
					<s:TextArea id="_username" text="devel" styleName="textarea" verticalAlign="middle" width="100%" height="40" />
					<s:TextArea id="_password" text="devel" displayAsPassword="true" styleName="textarea" verticalAlign="middle" width="100%" height="40" />
				</s:VGroup>
			</s:HGroup>
			<s:HGroup gap="20">
				<s:Button label="Exit" styleName="button" width="150" height="40" />	<!-- click="nativeApplication.exit(0);" -->
				<s:Button label="Connect" styleName="button" click="OnConnect();" width="150" height="40" />
			</s:HGroup>
		</s:VGroup>
	</mx:Canvas>
	<mx:Canvas id="_viewApplication" width="100%" height="100%">
	</mx:Canvas>
</mx:ViewStack>
