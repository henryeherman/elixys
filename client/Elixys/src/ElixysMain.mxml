<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		width="100%" height="100%" xmlns:Views="Elixys.Views.*">
	<fx:Style source="Elixys.css" />
	<fx:Script>
		<![CDATA[
			import Elixys.ExceptionEvent;
			import Elixys.HTTPConnection;
			import Elixys.JSONObject;
			import Elixys.Objects.*;
			
			import mx.controls.Alert;

			/***
			 *** Initialization functions
			 **/
			
			// Step 1: This function is called by the container to set the server
			public function Init1_SetServer(sServer:String, sCredentials:String):void
			{
				// Create the HTTP connection and wait until it opens a socket connection to the server
				m_pHTTPConnection = new HTTPConnection();
				m_pHTTPConnection.addEventListener(Event.CONNECT, Init2_OnHTTPConnect);
				m_pHTTPConnection.addEventListener(HTTPStatusEvent.HTTP_STATUS, OnHTTPStatusEvent);
				m_pHTTPConnection.addEventListener(ProgressEvent.PROGRESS, OnHTTPProgressEvent);
				m_pHTTPConnection.addEventListener(ExceptionEvent.EXCEPTION, OnChildExceptionEvent);
				m_pHTTPConnection.SetCredentials2(sCredentials);
				m_pHTTPConnection.Connect(sServer, 80);
			}

			// Step 2: Called when the connection to the server has been made
			public function Init2_OnHTTPConnect(sServer:String):void
			{
				// Load the system configuration
				m_pHTTPConnection.SendRequest("GET", "/Elixys/configuration", HTTPConnection.MIME_JSON);
			}

			// Step 3: Called when the system configuration has been received
			public function Init3_OnConfiguration(pConfiguration:Configuration):void
			{
				// Remember the system configuration
				m_pServerConfiguration = pConfiguration;
				
				// Load the current state
				m_pHTTPConnection.SendRequest("GET", "/Elixys/state", HTTPConnection.MIME_JSON);
				
				// Start the state timer
				var pTimer:Timer = new Timer(1000);
				pTimer.addEventListener(TimerEvent.TIMER, OnStateTimer);
				pTimer.start();
			}

			/***
			 *** Member functions
			 **/
			
			private function UpdateState(pState:State):void
			{
				// Show and update the appropriate state
				switch (pState.ClientState())
				{
					case ClientDetailsHome.TYPE:
						_viewStack.selectedChild = _viewHome;
						_viewHome.Update(pState);
						break;
				}
			}
			
			/***
			 *** Callback functions
			 **/
			
			// Called when the status of the HTTP request is know
			private function OnHTTPStatusEvent(event:HTTPStatusEvent):void
			{
				// Notify the user of any error
				if (event.status != 200)
				{
					Alert.show("HTTP request failed: " + event.status);
				}
			}
			
			// Called as the HTTP download progresses
			private function OnHTTPProgressEvent(event:ProgressEvent):void
			{
				// Check if we are the load is complete
				if (event.bytesLoaded == event.bytesTotal)
				{
					// Parse the JSON string
					var sJSON:String = m_pHTTPConnection.GetResponseBody().readUTFBytes(m_pHTTPConnection.GetResponseBody().length);
					var pJSON:JSONObject = new JSONObject(sJSON);
					switch (pJSON.type)
					{
						case (Configuration.TYPE):
							// Continue initialization process
							var pConfiguration:Configuration = new Configuration(sJSON);
							Init3_OnConfiguration(pConfiguration);
							break;
						
						case (State.TYPE):
							// Update our state
							var pState:State = new State(sJSON);
							UpdateState(pState);
							break;
						
						case (ServerError.TYPE):
							// Notify user of server error
							var pServerError:ServerError = new ServerError(sJSON);
							throw new Error("Server error: " + pServerError.Description());
							break;

						default:
							// Unhandled server message
							throw new Error("Message type " + pJSON.type + " not handled");							
					}
				}
			}
			
			// Called when an exception occurs in a child
			public function OnChildExceptionEvent(event:ExceptionEvent):void
			{
				Alert.show("Error: " + event.exception);
			}

			// Called at regular intervals to update the state
			private function OnStateTimer(event:TimerEvent):void
			{
				// Load the current state
				m_pHTTPConnection.SendRequest("GET", "/Elixys/state", HTTPConnection.MIME_JSON);
			}

			// HTTP connection to the server
			private var m_pHTTPConnection:HTTPConnection;
			
			// Server configuration
			private var m_pServerConfiguration:Configuration;
		]]>
	</fx:Script>
	
	<mx:ViewStack id="_viewStack" width="100%" height="100%">
		<Views:HomeView id="_viewHome" width="100%" height="100%" />
	</mx:ViewStack>
</mx:Canvas>
