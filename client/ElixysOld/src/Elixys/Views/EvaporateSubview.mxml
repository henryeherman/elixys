<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" xmlns:Renderers="Elixys.Views.Renderers.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentEvaporate;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			import Elixys.Objects.State;
			import Elixys.Objects.StateSequence;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when the state arrives from the server
			public override function UpdateState(pState:State):void
			{
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Set the status and video stream
					_runStatusText.text = pState.ServerState().RunState().Status();
					if (m_pComponentEvaporate != null)
					{
						m_pElixysMain.SetVideo(pState, m_pComponentEvaporate.Reactor, _runVideo);
					}
				
					// Update the timer buttons
					UpdateButtons(_timerButtons, pState.ServerState().RunState().TimerButtons(), CreateButtonCallback);
				}
			}

			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentEvaporate = new ComponentEvaporate(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Set the name and format the output text
					_viewComponentName.text = m_pComponentEvaporate.Name;
					_outputText.text = "Evaporate reactor " + m_pComponentEvaporate.Reactor + " at " + m_pComponentEvaporate.EvaporationTemperature +
						" \u00B0C for " + m_pComponentEvaporate.Duration + " seconds and cool to " + m_pComponentEvaporate.FinalTemperature + 
						" \u00B0C.\n\nFlow " + m_pComponentEvaporate.EvaporationPressure + " psi of nitrogen and stir at " + 
						m_pComponentEvaporate.StirSpeed + ".";
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Set the name
					_editComponentName.text = m_pComponentEvaporate.Name;
					
					// Fill the reactor combo box
					UpdateEnumNumberComboBox(m_pComponentEvaporate.ReactorValidation, _editReactorCombo, m_pComponentEvaporate.Reactor.toString());
					
					// Set all evaporation variables except the one the user is editing
					if (m_pKeyboardFocusTextArea != _editDuration)
					{
						_editDuration.text = m_pComponentEvaporate.Duration
					}
					if (m_pKeyboardFocusTextArea != _editEvaporationTemperature)
					{
						_editEvaporationTemperature.text = m_pComponentEvaporate.EvaporationTemperature.toString();
					}
					if (m_pKeyboardFocusTextArea != _editFinalTemperature)
					{
						_editFinalTemperature.text = m_pComponentEvaporate.FinalTemperature.toString();
					}
					if (m_pKeyboardFocusTextArea != _editStirSpeed)
					{
						_editStirSpeed.text = m_pComponentEvaporate.StirSpeed.toString();
					}
					if (m_pKeyboardFocusTextArea != _editEvaporationPressure)
					{
						_editEvaporationPressure.text = m_pComponentEvaporate.EvaporationPressure.toString();
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Set the name and format the output text
					_runComponentName.text = m_pComponentEvaporate.Name;
					_runOutputText1.text = "Evaporating reactor " + m_pComponentEvaporate.Reactor + " at " + 
						m_pComponentEvaporate.EvaporationTemperature + " \u00B0C for " + m_pComponentEvaporate.Duration +
						" seconds.";
					_runOutputText2.text = "Stirring at " + m_pComponentEvaporate.StirSpeed + " and cooling to a final temperature of " + 
						m_pComponentEvaporate.FinalTemperature + " \u00B0C.  ";
					_runVideoText.text = "Reactor " + m_pComponentEvaporate.Reactor;
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user changes the selection of the combo box
			protected function OnReactorChange(event:IndexChangeEvent):void
			{
				// Update our component
				m_pComponentEvaporate.Reactor = parseInt(_editReactorCombo.selectedItem as String);
				
				// Removing the following line causes a compile error for reasons I don't understand
				var pElixysMain:ElixysMain;

				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentEvaporate, "sequence/" + nSequenceID + "/component/" + m_pComponentEvaporate.ID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editDuration)
				{
					m_pComponentEvaporate.Duration = _editDuration.text;
				}
				if (m_pKeyboardFocusTextArea == _editEvaporationTemperature)
				{
					m_pComponentEvaporate.EvaporationTemperature = parseFloat(_editEvaporationTemperature.text);
				}
				if (m_pKeyboardFocusTextArea == _editFinalTemperature)
				{
					m_pComponentEvaporate.FinalTemperature = parseFloat(_editFinalTemperature.text);
				}
				if (m_pKeyboardFocusTextArea == _editStirSpeed)
				{
					m_pComponentEvaporate.StirSpeed = parseInt(_editStirSpeed.text);
				}
				if (m_pKeyboardFocusTextArea == _editEvaporationPressure)
				{
					m_pComponentEvaporate.EvaporationPressure = parseFloat(_editEvaporationPressure.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentEvaporate, "sequence/" + nSequenceID + "/component/" +
					m_pComponentEvaporate.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentEvaporate:ComponentEvaporate;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_viewComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<mx:Text id="_outputText" styleName="TextMedium" width="80%" />		
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_editComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:VGroup gap="15" width="100%" height="100%">
					<s:Spacer height="100%" />
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Reactor:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<s:ComboBox id="_editReactorCombo" change="OnReactorChange(event)" styleName="TextMedium" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Reactor to be evaporated"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Temperature:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editEvaporationTemperature" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
									focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Evaporation temperature in degrees Celsius"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Time:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editDuration" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
									focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Evaporation duration in seconds"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Final temperature:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editFinalTemperature" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
														focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Final temperature in degrees Celsius"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Stir speed:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editStirSpeed" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
									focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Speed of the stir bar"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Pressure:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editEvaporationPressure" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
														focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Evaporation pressure in psi"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:Spacer height="100%" />
				</s:VGroup>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_runComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" gap="15" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:HGroup verticalAlign="middle" width="80%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup verticalAlign="middle" width="80%">
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="80%">
					<s:Label text="Status:" styleName="TextMedium" />
					<mx:Text id="_runStatusText" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup id="_timerButtons" horizontalAlign="center" verticalAlign="middle" width="80%" />
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="80%">
					<mx:UIComponent id="_runVideo" width="480" height="320" />
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="80%">
					<mx:Text id="_runVideoText" styleName="TextMedium" />
				</s:HGroup>
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
