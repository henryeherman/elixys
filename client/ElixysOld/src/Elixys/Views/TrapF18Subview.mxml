<?xml version="1.0" encoding="utf-8"?>
<Views:SubviewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:Views="Elixys.Views.*" xmlns:Renderers="Elixys.Views.Renderers.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import Elixys.Events.HTTPRequestEvent;
			import Elixys.HTTP.HTTPRequest;
			import Elixys.Objects.Component;
			import Elixys.Objects.ComponentTrapF18;
			import Elixys.Objects.ReactorState;
			import Elixys.Objects.Reagent;
			import Elixys.Objects.State;
			import Elixys.Objects.StateSequence;
			
			import mx.controls.TextArea;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			/***
			 * Member functions
			 **/
			
			// Called when the state arrives from the server
			public override function UpdateState(pState:State):void
			{
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Set the status
					_runStatusText.text = pState.ServerState().RunState().Status();
					_runOutputText2.text = pState.ServerState().RunState().WaitMessage();
					
					// Update the timer and unit operation buttons
					UpdateButtons(_timerButtons, pState.ServerState().RunState().TimerButtons(), CreateButtonCallback);
					UpdateButtons(_unitOperationButtons, pState.ServerState().RunState().UnitOperationButtons(), CreateButtonCallback);
				}
			}

			// Called when component details arrive from the server
			public override function UpdateComponent(pComponent:Component):void
			{
				// Remember the component
				m_pComponentTrapF18 = new ComponentTrapF18(null, pComponent);
				
				// Handle according to our view mode
				if (m_sViewMode == SubviewBase.VIEWMODE)
				{
					// Set the name and format the output text
					_viewComponentName.text = m_pComponentTrapF18.Name;
					if (m_pComponentTrapF18.CyclotronFlag == 1)
					{
						_viewOutputText.text = "The cyclotron will push the F18 solution to trap.";
					}
					else if (m_pComponentTrapF18.CyclotronFlag == 0)
					{
						_viewOutputText.text = "Trap F18 for " + m_pComponentTrapF18.TrapTime + " seconds using " +
							m_pComponentTrapF18.TrapPressure + " psi nitrogen.";
					}
					else
					{
						_viewOutputText.text = "Unknown cyclotron flag";
					}
				}
				else if (m_sViewMode == SubviewBase.EDITMODE)
				{
					// Set the name and the cyclotron check box
					_editComponentName.text = m_pComponentTrapF18.Name;
					_editCyclotronFlagCheckBox.selected = m_pComponentTrapF18.CyclotronFlag == 1;

					// Show or hide the trap fields
					if (m_pComponentTrapF18.CyclotronFlag == 1)
					{
						_editTrapTimeGroup.visible = false;
						_editTrapTimeGroup.includeInLayout = false;
						_editTrapPressureGroup.visible = false;
						_editTrapPressureGroup.includeInLayout = false;
					}
					else
					{
						_editTrapTimeGroup.visible = true;
						_editTrapTimeGroup.includeInLayout = true;
						_editTrapPressureGroup.visible = true;
						_editTrapPressureGroup.includeInLayout = true;
					}
					
					// Set all variables except the one the user is editing
					if (m_pKeyboardFocusTextArea != _editTrapTime)
					{
						_editTrapTime.text = m_pComponentTrapF18.TrapTime.toString();
					}
					if (m_pKeyboardFocusTextArea != _editTrapPressure)
					{
						_editTrapPressure.text = m_pComponentTrapF18.TrapPressure.toString();
					}
				}
				else if (m_sViewMode == SubviewBase.RUNMODE)
				{
					// Set the name and format the output text
					_runComponentName.text = m_pComponentTrapF18.Name;
					if (m_pComponentTrapF18.CyclotronFlag == 1)
					{
						_runOutputText1.text = "Cyclotron will push the F18 solution to trap.";
					}
					else if (m_pComponentTrapF18.CyclotronFlag == 0)
					{
						_runOutputText1.text = "Trapping F18 for " + m_pComponentTrapF18.TrapTime + " seconds using " +
							m_pComponentTrapF18.TrapPressure + " psi nitrogen.";
					}
					else
					{
						_runOutputText1.text = "Unknown cyclotron flag";
					}
				}
			}

			/***
			 * Message handlers
			 **/
			
			// Called when creation is complete
			protected override function OnCreationComplete(event:FlexEvent):void
			{
				// Call the base implementation
				super.OnCreationComplete(event);

				// Set the base class variables
				m_pViewGroup = _viewGroup;
				m_pEditGroup = _editGroup;
				m_pRunGroup = _runGroup;
				
				// Set our view mode
				SetViewMode(m_sViewMode)
			}
			
			// Called when the user toggles the cyclotron flag check box
			protected function OnCyclotronFlagCheckBox(event:Event):void
			{
				// Update our component
				m_pComponentTrapF18.CyclotronFlag = _editCyclotronFlagCheckBox.selected ? 1 : 0;
				
				// Pass the request to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentTrapF18, "sequence/" + nSequenceID + 
					"/component/" + m_pComponentTrapF18.ID);
			}

			// Called when the user changes the text in one of our input fields
			protected override function OnTextValueChanged(pFocusTarget:TextArea):void
			{
				// Update our component
				if (m_pKeyboardFocusTextArea == _editTrapTime)
				{
					m_pComponentTrapF18.TrapTime = parseInt(_editTrapTime.text);
				}
				if (m_pKeyboardFocusTextArea == _editTrapPressure)
				{
					m_pComponentTrapF18.TrapPressure = parseFloat(_editTrapPressure.text);
				}
				
				// Save the component to the server
				var nSequenceID:uint = m_pElixysMain.GetActiveSequenceView().GetSequenceID();
				m_pElixysMain.GetActiveSequenceView().DoPost(m_pComponentTrapF18, "sequence/" + nSequenceID + "/component/" +
					m_pComponentTrapF18.ID);
			}

			/***
			 * Member variables
			 **/
			
			// Component
			private var m_pComponentTrapF18:ComponentTrapF18;
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		<s:VGroup id="_viewGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_viewComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<mx:Text id="_viewOutputText" styleName="TextMedium" width="80%" />		
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_editGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_editComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:VGroup gap="15" width="100%" height="100%">
					<s:Spacer height="100%" />
					<s:VGroup width="100%">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Cyclotron push:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" verticalAlign="middle" width="50%">
								<s:CheckBox id="_editCyclotronFlagCheckBox" change="OnCyclotronFlagCheckBox(event)" styleName="TextMedium"/>
								<s:Label styleName="FieldDescription" text="Set if the cyclotron will push to trap"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%" id="_editTrapTimeGroup">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Trap time:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editTrapTime" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
									focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Time to trap in seconds"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%" id="_editTrapPressureGroup">
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:HGroup horizontalAlign="right" width="50%">
								<s:Label text="Trap pressure:" styleName="TextMedium" />
							</s:HGroup>
							<s:HGroup horizontalAlign="left" width="50%">
								<Renderers:AutoTextArea id="_editTrapPressure" styleName="TextMedium" focusIn="OnTextFocusIn(event)"
									focusOut="OnTextFocusOut(event)" width="100%" />
							</s:HGroup>
						</s:HGroup>
						<s:HGroup verticalAlign="middle" gap="15" width="80%">
							<s:Spacer width="50%" />
							<s:HGroup horizontalAlign="left" width="50%">
								<s:Label styleName="FieldDescription" text="Pressure in psi to use when trapping"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
					<s:Spacer height="100%" />
				</s:VGroup>
			</s:VGroup>
		</s:VGroup>
		<s:VGroup id="_runGroup" visible="false" includeInLayout="false" width="100%" height="100%">
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label id="_runComponentName" styleName="TextLarge" />
			</s:HGroup>
			<s:Spacer height="10" />
			<s:VGroup horizontalAlign="center" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
				<s:Spacer height="100%" />
				<s:HGroup verticalAlign="middle" width="80%">
					<mx:Text id="_runOutputText1" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup verticalAlign="middle" width="80%">
					<mx:Text id="_runOutputText2" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="80%">
					<s:Label text="Status:" styleName="TextMedium" />
					<mx:Text id="_runStatusText" styleName="TextMedium" width="100%" />
				</s:HGroup>
				<s:HGroup id="_timerButtons" horizontalAlign="center" verticalAlign="middle" width="80%" />
				<s:HGroup id="_unitOperationButtons" horizontalAlign="center" verticalAlign="middle" width="80%" />
				<s:Spacer height="100%" />
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</Views:SubviewBase>
